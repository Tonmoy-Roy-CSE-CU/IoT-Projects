/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 20.10.2025 21:21:10

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242592;
#else
constexpr int kTensorArenaSize = 241568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 14552, -37479, -37286, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00039327258127741516, 0.0001636332890484482, 0.00014400682994164526, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 11,9,40,-46,-45,37,-4,-2,-21,9,11,28,-3,-10,4,-23,2,37,25,38,-62,-32,-1,-74,-37,-28,-14,-3,127,12,-9,0, 
  /* [1][0][][] */ 47,-36,-45,3,18,107,0,-10,118,-41,-8,-72,-44,98,32,-43,83,-28,15,-78,-107,13,100,74,33,44,19,9,-127,-34,-3,-5, 
  /* [2][0][][] */ -13,77,-67,84,90,-56,-16,122,89,37,127,-33,-93,-75,91,120,-92,-29,26,-107,86,116,-61,-97,88,-43,-6,-113,-104,-63,95,1, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0080651808530092239, 0.003355769207701087, 0.002953272545710206, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { -80, -293, -1332, -352, -567, 217, -1162, -542, -745, 98, -438, -186, -1304, -1567, -225, -493, -224, -1401, -1576, -1255, -1154, -577, -53, -1001, -772, -1169, -1256, -1296, 1966, -1380, -820, -1471, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.2728082664543763e-05, 4.3188683775952086e-05, 5.9739555581472814e-05, 6.5205749706365168e-05, 5.2320945542305708e-05, 6.3524676079396158e-05, 5.023325138608925e-05, 5.6171287724282593e-05, 5.4638290748698637e-05, 4.924819222651422e-05, 5.6927601690404117e-05, 0.00020808271074201912, 5.5705259001115337e-05, 5.6318851420655847e-05, 6.0032463807146996e-05, 5.4130265198182315e-05, 5.4488657042384148e-05, 5.7176468544639647e-05, 5.6058343034237623e-05, 5.3096227929927409e-05, 6.5680484112817794e-05, 5.2644318202510476e-05, 6.03426706220489e-05, 6.1731690948363394e-05, 5.4286105296341702e-05, 7.8322205808945e-05, 5.3993444453226402e-05, 5.2199502533767372e-05, 9.7319869382772595e-05, 5.2907769713783637e-05, 4.3714000639738515e-05, 5.399248402682133e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -35,-37,54,-19,63,-53,-77,-110,74,-73,-96,-17,44,17,-49,25,-84,-41,-82,-61,-41,-102,2,89,-81,15,64,-78,63,-26,-38,-98,71,-55,-73,3,-127,-76,-94,-27,37,-79,-124,35,16,-82,98,9,-27,-56,-23,66,-83,-51,-114,84,-8,11,95,-100,-104,22,-56,13,-7,0,31,56,-1,51,72,-108,79,-83,7,28,-110,-28,-46,-5,9,1,91,-61,-60,-29,-70,82,3,54,-12,-114,-22,32,-6,10, 
  /* [1][0][][] */ -54,25,-68,-8,-46,19,0,17,78,-95,-126,81,59,-24,42,40,48,-84,28,127,-46,21,14,-17,39,11,-74,105,16,18,14,-123,82,87,1,34,65,57,-11,-100,-94,-43,-37,-90,-76,-40,-19,-60,-43,-92,62,39,3,77,-117,-46,28,84,65,38,-66,107,-77,-109,-111,20,79,38,112,25,26,10,-109,86,-49,36,51,-57,-34,90,-88,52,-44,-114,32,70,-96,-49,96,110,91,9,79,104,41,-2, 
  /* [2][0][][] */ 4,-5,-74,39,-46,-45,35,38,-101,32,-57,54,33,-44,29,-111,-50,-44,-3,8,-103,-43,46,-14,-47,26,46,-24,-82,25,29,51,-81,-45,-99,-106,-94,35,43,-39,-96,-85,-13,-32,-82,58,-51,-87,127,-4,35,-95,-66,13,-8,-19,-80,42,-80,-24,-40,15,-54,19,34,5,5,33,-98,24,-27,-85,-7,-86,-9,-8,-66,-43,-31,-25,-3,-91,-40,-50,-32,-102,-48,-56,31,48,-49,-23,-56,-86,-66,-79, 
  /* [3][0][][] */ 42,-14,15,-22,-71,-14,-103,27,50,16,35,-33,60,69,52,-19,22,37,-35,5,81,-46,-31,-108,-40,-76,-84,53,25,-72,20,-34,-29,-43,-2,-31,-52,-11,31,-6,-49,-96,-108,-19,2,-29,-30,-71,14,-46,8,-28,54,9,10,-65,-108,-97,-78,-68,-106,-2,-29,26,16,-49,-50,-49,-24,-58,11,77,12,-75,30,-45,-9,37,80,-44,-70,-127,28,41,4,4,-15,-65,-51,41,-9,-103,28,-95,-56,12, 
  /* [4][0][][] */ 56,74,7,45,-29,-61,-6,-1,83,102,-17,27,34,-13,12,-104,-37,-32,-38,-13,107,-42,40,20,-46,11,18,-56,-30,27,-72,-65,74,102,18,-63,-72,-12,-127,-15,-31,-100,-126,-104,-12,53,61,2,-39,-20,-57,-122,-112,82,-77,28,63,-104,-1,37,-57,-73,-89,-87,-54,56,-1,-29,36,-97,-65,-68,-45,1,65,1,48,-76,-25,-56,-15,-26,-97,-49,11,23,63,-20,-95,-81,34,37,33,96,-80,-36, 
  /* [5][0][][] */ 76,-48,40,28,36,-109,30,15,98,-60,4,-33,28,81,7,36,11,43,-81,70,23,8,16,7,-77,-29,8,-54,41,0,13,-90,-23,10,-42,-22,-68,-43,0,6,-90,-24,11,53,-41,6,42,10,-114,79,21,37,46,1,24,-10,66,20,-22,-9,39,-54,-35,-37,-8,81,-47,7,7,-30,74,-73,-21,66,-23,-74,8,-8,-3,45,70,31,21,-29,-43,57,1,15,34,-127,69,76,-42,-26,-40,-37, 
  /* [6][0][][] */ -10,-63,71,40,-96,-69,-26,31,-37,-94,-19,-100,48,23,73,-126,21,-23,-25,63,-91,-126,69,25,-74,-94,-32,-74,-47,-122,16,-82,-102,-127,-63,-114,-33,10,-117,44,52,26,-5,-38,-120,67,-100,-63,-69,-7,-46,-80,26,-70,56,-48,-17,-31,-82,75,-106,-24,33,-85,-67,32,61,-66,42,-29,-115,-28,23,-83,-102,-59,-90,-111,-73,-49,4,-41,13,-46,-86,-98,-59,-105,47,56,57,-11,-69,-81,41,-48, 
  /* [7][0][][] */ 88,61,-25,-45,-64,6,-44,5,112,11,-92,0,37,-67,50,35,-27,-31,-15,88,41,49,-22,48,-43,72,12,43,-58,91,-75,-30,36,2,54,79,-66,58,-9,-50,25,-79,33,56,0,-70,92,-88,-12,-52,-127,-51,-29,77,-13,24,85,-86,15,-57,4,-9,44,-109,-93,-52,52,9,-85,7,51,56,68,11,43,28,-55,28,-72,48,58,-57,-11,-78,71,3,-98,89,73,26,62,38,-49,-23,-4,-52, 
  /* [8][0][][] */ 20,37,-30,-88,38,-20,-75,-14,56,47,24,83,4,-30,-53,-68,-92,59,-77,9,33,2,49,102,-100,73,38,61,-53,22,-95,47,84,-34,38,-11,117,-15,-22,51,3,73,-123,-93,-40,-68,9,97,-45,-79,-92,29,-54,6,-40,-78,22,72,-51,97,103,28,-4,75,-46,-29,-23,62,-78,22,26,-25,66,54,3,-12,-32,89,63,66,13,47,-85,-127,31,20,55,-15,32,-27,-74,86,-76,-79,-82,49, 
  /* [9][0][][] */ -9,20,102,28,95,-61,-40,-100,6,51,-9,11,-24,-72,-64,-33,-3,-11,-80,-49,0,106,-119,-112,127,-10,-38,34,0,-33,-85,87,75,-11,28,2,-57,4,-40,-9,42,-64,4,-38,103,-6,-97,24,66,-5,-86,-35,62,-52,-60,90,79,-44,-24,-8,-51,121,54,-83,-91,-2,100,61,-16,84,84,-82,7,64,-85,-88,-49,-114,-41,110,26,5,90,33,-36,-103,6,-19,103,44,-32,90,99,15,79,-32, 
  /* [10][0][][] */ -41,70,72,-62,-21,14,54,24,55,36,6,-61,73,65,-8,-12,-79,26,-78,-49,-11,44,26,-70,32,39,-113,-87,-34,67,-118,-99,82,66,94,59,-20,-4,-27,0,-65,64,-127,-28,-104,-95,13,-49,-47,0,-13,6,35,27,-79,-21,-77,-32,33,-38,-12,53,70,5,51,-64,-75,-23,19,-30,-68,-57,67,39,-66,63,-18,30,54,27,45,-17,45,53,-70,29,66,-8,37,23,-8,-64,-45,-29,-35,-54, 
  /* [11][0][][] */ 16,-6,22,24,8,36,1,-32,39,1,-16,14,-20,-25,10,49,42,-38,28,-2,16,13,0,-44,-17,-28,20,24,36,23,3,-15,-42,-26,-1,-1,-22,1,14,-27,4,21,41,-13,-29,100,-29,15,44,13,36,3,-23,-53,5,-7,-9,-31,17,-19,18,11,64,3,18,33,-1,17,51,34,-32,-5,-14,12,-27,23,15,8,-2,5,-25,-20,127,87,1,-5,-2,-29,-23,-26,58,-41,-11,-1,13,-16, 
  /* [12][0][][] */ -18,11,-74,-27,36,-6,-54,-1,-88,19,-47,-14,-67,-22,8,-96,-102,-57,-60,-92,-12,-36,-21,40,-77,-66,46,-115,41,-24,-54,65,-97,-85,-66,-15,-36,-85,-43,2,88,0,-109,-65,-44,-92,-65,58,12,-115,-89,41,-4,-37,-86,36,-34,-75,8,18,10,56,-9,14,52,-9,-62,59,12,53,0,25,32,62,-45,-34,-65,4,-127,-104,-76,57,6,11,-61,-7,9,55,-105,-111,42,1,54,-38,0,33, 
  /* [13][0][][] */ 55,-59,43,45,68,46,71,24,48,-72,-24,-29,28,19,13,-75,-120,-58,-92,17,13,-55,82,-40,-27,27,-10,-36,-98,-91,67,-2,7,57,-52,-8,-99,-43,1,17,-62,71,-71,-45,-47,20,-34,-30,-18,41,-14,-127,-83,-9,93,-73,-64,-13,-9,-115,-59,40,-105,28,-43,-82,-95,17,-73,-37,55,-42,-97,18,-90,-68,-110,63,18,-91,-1,-80,47,-72,-98,-65,66,68,-52,-77,-87,2,57,-69,-1,-1, 
  /* [14][0][][] */ -73,-63,61,44,48,-61,-25,-73,-47,-58,39,58,-37,-71,-71,-54,-37,-44,-5,22,-35,22,-5,40,-72,-70,-19,24,-87,-76,-82,-6,76,-46,-30,-11,88,83,34,-70,-44,-91,4,73,34,-127,38,-51,53,5,36,45,70,-27,-13,-4,-62,3,52,47,0,-60,-13,46,-82,-25,56,-85,-70,-70,-66,56,6,62,40,-52,48,-73,44,39,28,-51,-84,-64,-78,-68,-89,97,85,25,67,-41,48,82,-17,54, 
  /* [15][0][][] */ 14,-23,-19,45,53,-112,-6,-67,56,2,-71,-21,80,7,-55,-107,37,-31,-75,24,43,43,48,51,71,49,-2,75,21,59,-17,-127,22,-18,-43,5,-35,89,94,-102,-15,45,-79,-19,-20,-121,-22,-61,-58,-66,-49,8,-89,-73,-89,-7,58,12,-30,66,-50,-71,0,48,-82,56,-52,-4,-39,-8,56,-61,18,-15,48,-98,-17,34,95,81,-75,22,-77,-53,-88,-63,-95,54,85,88,-87,-51,35,106,-78,88, 
  /* [16][0][][] */ -50,14,75,-61,56,73,-1,21,66,57,-62,75,-12,-37,-61,-40,73,78,53,35,88,38,-19,83,-37,53,-25,48,-90,-3,55,-1,-95,77,32,36,-26,44,-47,-45,14,-22,52,56,35,84,87,2,-89,-87,50,111,-19,97,69,42,15,64,73,43,107,69,12,68,83,30,-30,53,7,62,-25,-19,17,91,44,54,2,94,-99,-26,10,-52,33,-31,2,93,94,-6,45,-20,-15,100,52,-36,-127,26, 
  /* [17][0][][] */ -13,-103,-10,28,-57,-107,-74,-106,-7,-105,27,5,35,6,-127,9,-12,10,40,55,-110,-51,-27,-67,-3,15,-87,-2,43,-66,-50,28,-60,-55,-16,-24,-65,42,-99,-53,-100,-54,-30,-34,-17,-14,24,-112,106,43,-34,-2,-41,26,52,-96,-117,26,-93,-117,7,-98,33,48,-91,-85,3,-106,-124,-35,43,-16,-24,-118,-83,29,69,-58,-9,-79,-23,-36,-93,-86,-124,30,21,-52,-20,30,-106,-119,-36,55,-25,-13, 
  /* [18][0][][] */ -50,40,54,-30,-42,-115,-114,29,-33,82,-117,-14,-65,1,68,-79,-16,-52,22,-24,88,-13,-19,-96,8,-48,-47,48,-15,-11,-32,-2,54,-57,-74,-59,-52,49,-31,13,-18,-36,-46,-42,-106,-16,0,-38,28,5,34,-10,-118,-43,28,32,-17,-9,-50,-122,28,50,21,-8,-89,-127,-2,31,30,-34,-79,92,-110,-7,-103,-115,6,66,-24,-94,-67,-35,-39,-48,47,-63,24,36,-74,-36,-84,46,92,-80,59,8, 
  /* [19][0][][] */ -12,1,36,6,28,-91,56,47,46,-77,-4,-31,-103,-2,-72,23,36,-106,59,21,-47,36,-71,-8,36,-92,0,-76,-98,-120,-76,11,39,-93,0,-28,-16,-85,-73,-104,19,-114,-89,-14,-92,-3,33,-104,2,1,-57,20,-51,-16,-18,-33,-11,56,-25,-49,22,-67,54,26,-83,-26,-47,-27,-34,20,32,-68,-75,-127,-71,-87,-42,-109,-18,61,23,-118,-53,42,-97,-29,-19,-27,45,-4,-31,30,-50,62,25,-65, 
  /* [20][0][][] */ -19,34,53,54,-78,30,-32,51,8,8,-97,-16,-26,60,33,-87,-65,-55,-42,-23,29,14,-76,-74,63,-57,-114,18,24,25,-67,31,76,-5,3,52,50,-2,0,-104,-86,-57,-70,-88,-47,-80,-40,58,-45,-86,-127,13,4,66,-24,-21,68,25,54,27,47,-74,-26,-66,-75,-74,-24,-33,-53,-49,-59,51,-44,-38,23,-5,39,54,99,102,50,-22,63,-14,25,38,-34,67,42,103,27,16,13,30,5,11, 
  /* [21][0][][] */ 74,76,54,-107,65,-101,33,10,23,-33,-73,-1,-5,33,-31,-88,-127,-55,10,-17,86,-17,38,-87,58,-70,-53,58,8,14,-46,-61,19,3,-76,-92,101,72,-96,-76,-45,-12,-36,-18,-107,-122,-54,77,-88,-58,-46,80,11,68,-103,18,-40,13,-29,97,30,-79,5,-41,30,18,-33,-69,-92,-39,45,51,26,-22,54,32,-93,-37,55,95,-9,58,30,-83,22,-99,40,-48,-76,85,83,-115,-62,-50,48,-32, 
  /* [22][0][][] */ 39,-40,-39,-67,64,-73,82,32,-34,79,-46,-48,96,-64,-65,-62,-4,62,-109,-41,92,-53,26,50,-4,9,-56,67,-36,-73,-51,-101,37,53,21,-23,23,-12,-49,-85,-37,-18,-7,62,17,-107,90,14,-90,-41,17,18,-36,-74,-42,32,-36,-22,-9,0,114,-56,-110,-74,-34,30,-103,-50,54,66,-8,-11,-36,47,38,-101,36,-9,48,69,85,-71,-44,-127,68,57,77,-14,-47,-47,-35,65,-3,-21,-102,105, 
  /* [23][0][][] */ 36,-62,0,10,77,-89,17,-80,67,-58,68,87,15,-91,-21,-24,86,-5,-105,37,48,-93,75,14,-49,-17,95,17,28,16,48,-47,-40,31,0,-14,69,-46,-112,41,-93,-1,-25,-72,-71,-71,79,33,28,-113,-67,6,72,-35,-24,61,-92,-2,91,56,-32,-58,-80,5,33,43,-104,-101,-2,-17,72,-92,2,-26,-36,-118,50,-29,31,59,-52,-58,-14,-127,74,1,90,-27,-98,-26,51,28,42,-67,-96,31, 
  /* [24][0][][] */ -63,-31,-89,-76,-79,-127,-85,-81,79,105,55,10,89,47,-17,-107,-106,9,-4,-52,79,-43,-68,-38,40,-25,39,39,82,45,-30,-85,5,-1,36,23,-48,-91,32,-58,-72,-111,35,-8,-36,-77,53,42,-118,-53,-43,33,31,60,26,-58,5,40,17,1,68,-24,-2,46,-100,74,-48,-77,-85,30,-45,-39,-35,-1,62,49,45,-80,-90,-70,-85,-106,-53,-112,2,24,-22,-93,19,-99,-7,-84,-35,18,-116,1, 
  /* [25][0][][] */ -76,-39,-67,-36,65,-23,-41,14,18,-127,22,42,10,-40,-93,-31,23,94,0,-45,7,5,44,-26,-31,-83,-15,2,14,-75,26,65,20,-102,-3,5,65,-28,-31,29,-81,73,-87,-2,34,-37,9,44,-24,27,-37,23,28,7,-29,-17,-49,40,27,53,88,5,5,47,11,22,-33,-34,-74,-20,-29,-126,-3,14,21,-11,58,91,-32,-9,7,-7,-55,-14,-56,14,-12,-65,-43,-59,27,4,-88,-33,-41,-32, 
  /* [26][0][][] */ 9,-127,-44,-34,-106,-49,-35,-34,-112,-122,52,45,-90,-69,-17,-37,69,2,-73,-78,-17,30,50,-14,13,22,-12,9,-17,-22,-107,-43,-54,-80,-107,-106,-78,44,-65,59,-114,56,23,0,-85,30,-61,62,-47,-3,-25,59,-17,-67,-27,-110,46,26,12,-21,-21,-100,27,-44,66,-46,-66,18,-93,41,38,52,37,-97,-95,-20,8,-117,-103,-19,-48,30,39,-89,32,-29,-70,-10,-95,62,-18,-12,-69,67,15,44, 
  /* [27][0][][] */ -20,-10,-82,-107,-126,1,-79,-37,0,58,-5,-113,-52,16,39,-59,112,-21,28,-93,-108,-20,-48,-46,-116,12,-121,-37,27,-7,-53,-34,22,26,-100,-101,-35,-77,-45,49,-27,49,78,50,63,-14,25,55,116,29,105,-23,-98,-106,-28,-54,51,-41,-63,-99,-23,-75,24,21,0,-71,-116,57,11,64,-127,-18,22,-68,-38,-95,4,-77,48,54,41,-50,73,-30,-93,-94,-52,43,-70,-28,-57,-70,20,-19,47,21, 
  /* [28][0][][] */ 53,-20,55,64,-45,34,-15,33,-35,-52,73,26,-42,-46,47,127,76,54,52,43,-10,2,-61,-65,-74,45,27,-55,-13,-13,49,51,-74,15,19,49,-55,-17,67,27,91,57,-24,54,-4,103,-5,38,39,41,83,-29,-36,-5,105,17,37,19,8,46,44,9,44,34,104,32,117,107,61,44,-52,18,22,15,36,32,-45,-56,-38,-9,-24,-14,102,84,17,89,16,15,-65,30,55,-49,36,60,119,-8, 
  /* [29][0][][] */ 22,11,11,-69,-97,9,-118,-27,54,-40,-95,-99,61,-113,-72,-69,-48,107,-7,-82,-96,-61,29,-18,-63,-22,-61,-54,-116,-43,63,1,11,-19,-93,-78,-45,49,-43,80,78,58,-60,41,-11,65,-72,-55,125,-33,16,-113,26,-114,70,16,-104,32,-61,68,-127,51,-102,-68,-81,-74,8,43,44,-90,11,-88,62,31,17,-12,71,-76,-58,-9,-35,-91,-38,-82,26,62,29,26,-65,42,23,44,-110,-18,-24,19, 
  /* [30][0][][] */ -2,-64,-68,13,-101,17,-81,-19,106,-35,-15,-53,-116,3,35,-4,-12,20,76,-106,30,-106,-112,13,-109,4,-76,115,-20,-107,-108,-19,-87,-94,-127,-62,15,-30,-15,14,66,-79,-14,78,81,-58,92,56,-74,38,16,-102,89,-54,-34,76,-81,-72,-80,-63,-103,-23,-78,-41,-110,-91,-105,64,-72,93,32,-52,-100,99,24,-92,-60,-69,-75,-62,23,-1,-103,-22,-111,24,-116,103,-37,-113,61,39,-56,-10,1,-85, 
  /* [31][0][][] */ 39,-108,-4,49,9,28,-76,-108,-58,-37,-96,-94,48,-127,-68,55,-74,-96,62,8,18,2,-57,52,13,-115,0,-1,-86,-91,8,60,-17,-15,-105,-34,44,-47,-86,-115,32,-88,-46,-8,-28,-69,-64,-12,101,-2,45,-56,-125,-79,-87,-11,-116,25,-27,61,-64,-35,54,-90,24,56,-65,-94,26,-119,-124,-24,-110,-56,-30,-28,-80,-60,9,40,-94,-61,24,37,15,47,-100,-16,-19,-71,-101,-77,-20,53,-25,-43, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0022409434895962477, 0.0018355190986767411, 0.0025389310903847218, 0.0027712443843483925, 0.002223640214651823, 0.002699798671528697, 0.0021349131129682064, 0.0023872796446084976, 0.0023221273440867662, 0.0020930480677634478, 0.0024194230791181326, 0.0088435150682926178, 0.0023674734402447939, 0.0023935511708259583, 0.0025513796135783195, 0.002300536260008812, 0.0023157678078860044, 0.0024299998767673969, 0.0023824796080589294, 0.0022565897088497877, 0.0027914205566048622, 0.00223738350905478, 0.0025645634159445763, 0.0026235966943204403, 0.0023071593604981899, 0.0033286937978118658, 0.0022947213146835566, 0.0022184788249433041, 0.0041360943578183651, 0.0022485801018774509, 0.001857844996266067, 0.0022946805693209171, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 303, -457, 2979, 6810, 3157, -4204, 2997, -1563, -2212, -666, 6313, -2356, 2912, 4247, 1381, 2329, 235, -330, -1199, 4167, 1737, -898, 1467, -588, -1776, 1997, 1273, 1715, 3940, 1652, 4947, 1849, 1220, 3796, 4031, 2773, -603, 2881, 2384, -3062, 1192, 726, 975, 1405, -1006, 1692, -1624, 372, -4848, 1747, 1567, -3331, 5845, -990, 2601, 941, 756, 1936, -967, -2188, -42, 1112, 125, 2616, 4250, 2043, 3575, 3906, 5170, -1621, 1515, 3289, 3258, -1424, 5547, 4074, -7, -3306, 231, 803, 7304, 1909, -464, -1514, 1234, 58, 1038, -4134, 4931, -787, 3617, 470, -219, -3423, 474, 519, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00016181686078198254, 0.00025811602245084941, 0.0001630436017876491, 0.00010992258467013016, 0.00018473077216185629, 0.00013420385948847979, 0.00017106042650993913, 0.00020282896002754569, 0.00022463312780018896, 0.00034996986505575478, 0.00012414631783030927, 0.00021721137454733253, 0.00016520796634722501, 0.00012462769518606365, 0.00020389768178574741, 0.0002516965614631772, 0.00025450412067584693, 0.00020166469039395452, 0.00022222523693926632, 0.00013008897076360881, 0.00021814438514411449, 0.00025798205751925707, 0.0001605670404387638, 0.00027659724582917988, 0.00018776686920318753, 0.00027492217486724257, 0.00016102200606837869, 0.00017352485156152397, 0.00016046129167079926, 0.00021770694002043456, 0.00011753950821002945, 0.00015317297948058695, 0.00021592884149868041, 0.00015587573579978198, 0.00015566217189189047, 0.00017543559079058468, 0.00019300589337944984, 0.00014503720740322024, 0.00016391169629059732, 0.0001273573434446007, 0.00022121745860204101, 0.00020041201787535101, 0.00026150379562750459, 0.00016750264330767095, 0.00018317799549549818, 0.00015709258150309324, 0.00019265015725977719, 0.00017052279144991189, 0.00013051115092821419, 0.00017210586520377547, 0.00018404539150651544, 0.00016482362116221339, 0.00011816765618277714, 0.00021078863937873393, 0.00020242699247319251, 0.00020292794215492904, 0.00023590671480633318, 0.00014404526154976338, 0.0002655418065842241, 0.00018286115664523095, 0.00026941762189380825, 0.00013562620733864605, 0.00021279034262988716, 0.00020519614918157458, 0.00016594988119322807, 0.00020124875300098211, 0.00013581836537923664, 0.00017188508354593068, 0.00012707735004369169, 0.00013800352462567389, 0.00018402337445877492, 0.0002090879570459947, 0.00012124837667215616, 0.00019606738351285458, 0.00012184094521217048, 0.0001858838222688064, 0.00019291194621473551, 0.00020114390645176172, 0.0001925151445902884, 0.0001883581280708313, 0.000108968852146063, 0.00014656866551376879, 0.00019352654635440558, 0.000233942482736893, 0.00014833435125183314, 0.00020342506468296051, 0.00019290529598947614, 0.00012638083717320114, 0.00011821559746749699, 0.00018468496273271739, 0.00014698837185278535, 0.00032255286350846291, 0.00021373934578150511, 0.00013687678438145667, 0.00031966439564712346, 0.00021327139984350652, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ 22,127,-68,4,49,-45,65,40,-45,21,41,-76,71,114,-33,-7, 
  /* [1][0][][] */ -31,22,-30,-43,-9,60,7,-127,22,-27,-46,-55,-29,-30,-50,-14, 
  /* [2][0][][] */ -9,-6,33,64,38,27,-127,110,-7,-2,76,-53,-16,-82,-31,32, 
  /* [3][0][][] */ 127,-69,47,11,-15,-73,-58,99,-6,33,104,65,-4,43,22,-11, 
  /* [4][0][][] */ -39,-18,22,80,-55,-12,-20,-127,3,-3,12,-18,61,31,105,126, 
  /* [5][0][][] */ 127,53,22,-38,-63,11,-21,48,-11,4,55,85,74,16,-40,-24, 
  /* [6][0][][] */ 10,-12,9,-59,-55,6,-38,-38,-63,-8,-18,44,61,11,127,-36, 
  /* [7][0][][] */ -36,55,-54,-55,-7,-78,-73,3,-83,71,-68,-78,-127,-35,37,73, 
  /* [8][0][][] */ 75,78,78,30,54,26,97,50,74,8,72,-21,-127,0,-98,28, 
  /* [9][0][][] */ -40,72,31,-35,-16,8,34,-4,-31,66,1,-8,19,127,3,15, 
  /* [10][0][][] */ 127,63,-102,17,-10,-44,7,-44,-101,-30,-10,-47,-101,-110,68,118, 
  /* [11][0][][] */ 48,13,53,3,11,-28,-9,115,-87,32,-25,9,6,1,48,127, 
  /* [12][0][][] */ -75,-19,43,44,46,30,127,41,-50,78,-5,-26,-33,73,-59,102, 
  /* [13][0][][] */ -18,8,65,53,73,74,104,35,-33,112,-127,-90,-9,51,-81,-65, 
  /* [14][0][][] */ -78,127,-23,-51,-89,-25,59,-11,-66,33,124,32,-28,6,1,36, 
  /* [15][0][][] */ -2,11,-127,-44,72,-39,-56,-19,-26,-28,-19,-57,-6,-27,-32,21, 
  /* [16][0][][] */ 92,-66,15,-31,71,-26,70,-32,-27,-40,127,36,46,-31,-57,43, 
  /* [17][0][][] */ -15,-9,-3,-57,3,-57,127,-103,15,-19,-35,22,66,48,-1,101, 
  /* [18][0][][] */ 39,127,-34,-48,45,-63,-40,-57,-41,75,-19,16,-6,55,5,15, 
  /* [19][0][][] */ -54,-89,71,-87,48,-108,-17,-41,51,51,77,127,48,-29,72,-20, 
  /* [20][0][][] */ -25,107,66,33,29,20,48,1,61,1,96,-69,-127,7,-102,16, 
  /* [21][0][][] */ -63,42,2,11,81,39,48,18,-127,59,-50,50,-47,-10,-37,-51, 
  /* [22][0][][] */ 11,-89,73,40,45,-127,115,4,34,-16,-51,-94,59,-86,-63,-28, 
  /* [23][0][][] */ -47,-76,29,58,35,-16,30,-19,22,-11,51,-12,22,56,34,127, 
  /* [24][0][][] */ -33,11,25,110,50,67,-68,-127,58,17,-49,13,-26,-2,-34,-54, 
  /* [25][0][][] */ -19,47,28,-39,-18,10,-3,-29,-16,97,-18,-1,30,127,17,15, 
  /* [26][0][][] */ -57,124,-5,39,71,-127,-9,-54,41,54,31,75,21,-11,-103,123, 
  /* [27][0][][] */ -37,-124,-29,-7,-46,121,-22,-62,5,-23,44,-40,13,-68,-127,-16, 
  /* [28][0][][] */ -11,0,37,70,22,9,-41,-127,-119,28,114,-19,52,9,-40,-38, 
  /* [29][0][][] */ -127,96,-6,-6,-8,46,-123,-55,-40,-12,-2,-11,-9,-34,-96,40, 
  /* [30][0][][] */ 65,127,-11,72,-119,-125,-113,-57,-75,89,2,-126,100,27,-2,57, 
  /* [31][0][][] */ 127,25,-66,-56,-77,11,88,23,-70,-22,16,60,40,31,-13,-15, 
  /* [32][0][][] */ -47,-27,127,-15,10,75,45,6,-12,19,-33,9,-19,31,28,18, 
  /* [33][0][][] */ -13,52,-43,-23,-6,48,108,44,-5,45,44,-71,87,127,-48,66, 
  /* [34][0][][] */ -109,-34,127,5,38,-12,82,-14,-121,32,31,-41,45,22,-52,-7, 
  /* [35][0][][] */ -19,21,-33,-22,-43,125,-60,-19,-35,127,-16,103,-80,43,23,47, 
  /* [36][0][][] */ -28,-84,127,-55,-9,39,-38,-2,-2,11,-65,62,-10,-69,-37,55, 
  /* [37][0][][] */ 59,-27,102,-65,122,-66,-57,48,-66,105,-74,1,-127,-64,84,-51, 
  /* [38][0][][] */ 45,60,26,-127,7,-82,-108,94,-36,33,-86,-57,-69,-75,-76,38, 
  /* [39][0][][] */ -72,18,-42,-24,-93,-33,101,10,-127,-96,13,49,29,-22,3,37, 
  /* [40][0][][] */ 75,40,-2,-127,-26,22,34,-24,-67,-67,-55,-54,-20,20,39,3, 
  /* [41][0][][] */ 106,-42,-65,-26,19,-22,-79,-2,66,10,-1,-30,127,-72,68,-50, 
  /* [42][0][][] */ -17,-77,-39,127,14,-50,-108,11,8,35,14,42,-46,74,-52,-13, 
  /* [43][0][][] */ -59,-16,-68,-125,-55,-16,13,60,45,-127,-17,41,-4,-49,-29,96, 
  /* [44][0][][] */ -48,77,42,-33,-53,5,55,123,77,-99,55,127,73,13,-1,12, 
  /* [45][0][][] */ 32,82,-58,105,127,-105,-53,-73,107,-23,50,-64,-63,16,-38,20, 
  /* [46][0][][] */ 6,-33,-5,14,96,-38,24,21,11,110,-12,-127,49,73,-60,100, 
  /* [47][0][][] */ 77,-38,-37,0,52,-23,-65,-58,-11,127,-24,63,-2,-108,-64,27, 
  /* [48][0][][] */ 19,24,-44,-118,-12,-17,127,-103,-6,-35,-18,38,39,57,-21,-1, 
  /* [49][0][][] */ 10,127,-81,31,37,-56,18,-4,-13,-19,23,-43,-22,26,112,-72, 
  /* [50][0][][] */ 22,45,-40,41,-127,-10,-63,-48,66,109,52,44,-31,-30,-15,32, 
  /* [51][0][][] */ 127,-56,-35,-22,-8,64,-103,-43,38,-19,-54,122,-5,-109,1,62, 
  /* [52][0][][] */ -39,-105,80,108,-96,-104,-127,26,-60,-88,-49,-92,9,-30,-31,99, 
  /* [53][0][][] */ 1,97,76,-91,40,127,58,-11,15,24,-18,-57,44,-86,0,2, 
  /* [54][0][][] */ 16,127,8,-29,35,9,-104,27,-13,11,-96,80,50,90,47,14, 
  /* [55][0][][] */ -7,8,16,-13,28,-61,72,64,-93,-25,38,17,127,47,-17,-11, 
  /* [56][0][][] */ 98,28,26,46,-22,127,-52,-80,-25,63,-85,-3,-65,93,-7,34, 
  /* [57][0][][] */ -33,-29,-70,-4,-77,-109,70,-42,-127,17,61,59,53,45,-2,73, 
  /* [58][0][][] */ 91,-16,58,22,21,-92,-47,37,38,19,-127,-26,21,-30,-26,51, 
  /* [59][0][][] */ 83,48,-127,73,4,42,65,-22,-72,-26,39,-96,-87,-27,23,103, 
  /* [60][0][][] */ -6,15,10,12,-5,-21,-28,-13,-34,-16,30,127,-12,-108,-13,14, 
  /* [61][0][][] */ -2,57,45,-104,-87,50,4,86,-2,-127,76,53,87,22,47,35, 
  /* [62][0][][] */ 89,50,-8,-127,-36,-22,13,-4,-6,30,-30,52,51,-11,-102,-81, 
  /* [63][0][][] */ 25,3,-8,9,-40,-64,-67,-4,-55,44,-32,-11,127,-3,45,-22, 
  /* [64][0][][] */ 44,35,-35,41,-70,-55,-44,-57,52,127,43,-4,7,-39,-13,47, 
  /* [65][0][][] */ -8,30,-28,-21,-43,52,16,-35,52,-68,85,-71,68,39,-127,46, 
  /* [66][0][][] */ -109,117,-88,-29,52,-25,-104,-39,-66,127,100,-1,-89,-13,49,43, 
  /* [67][0][][] */ 17,-3,-127,-108,46,37,6,-36,-13,-18,36,-10,27,38,47,16, 
  /* [68][0][][] */ 71,45,-41,-23,-77,1,13,20,-30,53,127,2,15,-62,-71,-1, 
  /* [69][0][][] */ 92,-70,58,-46,48,-127,-45,100,17,116,89,71,-13,75,11,-48, 
  /* [70][0][][] */ 59,-21,94,103,75,-42,127,1,66,23,-61,25,-30,66,-66,78, 
  /* [71][0][][] */ 1,25,106,-98,-127,-74,9,25,-26,-1,18,-98,-93,1,0,7, 
  /* [72][0][][] */ -63,-72,34,-116,67,8,18,21,-53,19,-127,-22,25,76,-77,82, 
  /* [73][0][][] */ 12,20,50,-1,99,-87,-36,12,-36,77,-89,37,-51,-31,127,-8, 
  /* [74][0][][] */ -111,0,-96,-69,92,-24,-24,46,-82,40,-127,-47,-62,-58,-53,68, 
  /* [75][0][][] */ 73,-26,53,-38,16,9,-127,-7,2,-82,64,-13,-14,-7,-14,-16, 
  /* [76][0][][] */ 43,-48,-43,83,-1,28,63,-23,76,-109,86,127,28,-79,-68,38, 
  /* [77][0][][] */ -38,-23,127,-7,58,-44,-40,-85,9,30,1,73,57,48,27,-11, 
  /* [78][0][][] */ -64,-5,46,-56,1,-34,6,-14,11,9,-3,-89,-116,-72,-127,-64, 
  /* [79][0][][] */ -127,-77,23,-3,82,57,-21,10,-9,37,-47,30,-34,-83,-48,9, 
  /* [80][0][][] */ -18,-98,73,127,-16,-20,-85,59,10,28,38,3,-48,-20,-18,68, 
  /* [81][0][][] */ 90,82,-10,79,16,58,31,127,-5,20,127,52,113,29,51,0, 
  /* [82][0][][] */ -24,38,-30,1,1,-127,-112,-82,21,66,-31,-29,-2,104,-43,-17, 
  /* [83][0][][] */ 120,6,85,-23,-66,-13,-127,-44,-4,-89,26,-40,-16,-7,70,-37, 
  /* [84][0][][] */ 6,-75,-94,64,115,52,52,75,-127,56,-69,-62,59,-12,-115,92, 
  /* [85][0][][] */ 5,106,23,15,78,5,23,-116,127,23,27,7,111,-111,15,2, 
  /* [86][0][][] */ 127,-44,116,75,14,-61,88,35,-53,-56,-79,-49,70,25,-56,45, 
  /* [87][0][][] */ 19,32,37,-71,103,-52,-63,13,62,-21,61,-67,-105,-127,3,-4, 
  /* [88][0][][] */ -97,-59,61,-25,27,59,-79,-61,-17,8,-93,-127,-52,-47,-24,-12, 
  /* [89][0][][] */ -97,11,54,-89,9,25,-127,27,69,19,-81,-19,-27,-80,-42,-37, 
  /* [90][0][][] */ -10,-11,-26,-90,127,15,-57,43,42,64,32,-22,34,22,-86,-35, 
  /* [91][0][][] */ -38,-67,21,67,-27,-25,3,20,1,-1,19,-47,19,32,19,127, 
  /* [92][0][][] */ -4,83,-9,-46,-28,20,-127,40,-21,-41,46,34,-33,106,63,14, 
  /* [93][0][][] */ -4,104,-76,-38,68,85,-108,37,73,78,111,71,-127,44,-52,74, 
  /* [94][0][][] */ 19,46,72,30,-127,-20,18,-7,21,-36,49,4,-9,-17,35,8, 
  /* [95][0][][] */ 10,7,54,-26,45,-65,-75,43,-10,-6,-89,127,13,-13,92,-11, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0015618285397067666, 0.0024912916123867035, 0.0015736689092591405, 0.0010609539458528161, 0.0017829897115007043, 0.0012953126570209861, 0.0016510458663105965, 0.0019576703198254108, 0.0021681203506886959, 0.0033778490033000708, 0.0011982389260083437, 0.0020964869763702154, 0.001594558940269053, 0.0012028851779177785, 0.0019679854158312082, 0.0024293321184813976, 0.0024564301129430532, 0.0019464329816401005, 0.0021448798943310976, 0.001255596405826509, 0.0021054921671748161, 0.0024899984709918499, 0.0015497655840590596, 0.002669669222086668, 0.0018122936598956585, 0.002653501695021987, 0.0015541567699983716, 0.0016748320776969194, 0.0015487448545172811, 0.0021012700162827969, 0.0011344711529091001, 0.0014783993829041719, 0.0020841080695390701, 0.0015044858446344733, 0.0015024245949462056, 0.001693274243734777, 0.0018628598190844059, 0.0013998742215335369, 0.0015820475528016686, 0.0012292312458157539, 0.0021351529285311699, 0.0019343424355611205, 0.002523989649489522, 0.0016167067224159837, 0.0017680026357993484, 0.0015162306372076273, 0.0018594262655824423, 0.0016458567697554827, 0.0012596711749210954, 0.0016611362807452679, 0.0017763745272532105, 0.0015908493660390377, 0.001140533946454525, 0.0020344958174973726, 0.0019537906628102064, 0.0019586256239563227, 0.0022769311908632517, 0.001390300109051168, 0.0025629641022533178, 0.0017649445217102766, 0.0026003727689385414, 0.0013090408174321055, 0.0020538158714771271, 0.0019805179908871651, 0.0016017197631299496, 0.0019424183992668986, 0.0013108955463394523, 0.0016590052982792258, 0.0012265287805348635, 0.0013319862773641944, 0.0017761620692908764, 0.0020180810242891312, 0.001170268515124917, 0.001892408705316484, 0.0011759878834709525, 0.0017941187834367156, 0.0018619529437273741, 0.0019414065172895789, 0.0018581231124699116, 0.0018180003389716148, 0.0010517486371099949, 0.0014146555913612247, 0.0018678850028663874, 0.0022579727228730917, 0.0014316977467387915, 0.0019634237978607416, 0.0018618887988850474, 0.0012198061449453235, 0.0011409966973587871, 0.0017825475661084056, 0.0014187064953148365, 0.0031132248695939779, 0.0020629754289984703, 0.0013211112236604095, 0.0030853459611535072, 0.0020584589801728725, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 8387, 9485, -2365, -1344, -49, 7265, 2963, -6814, 10664, -2189, 317, 344, -12135, 3828, 2106, 7005, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.7394590839976445e-05, 7.5782569183502346e-05, 5.4053580242907628e-05, 6.804884469602257e-05, 4.3831820221384987e-05, 7.804064080119133e-05, 7.4558818596415222e-05, 3.2644249586155638e-05, 8.1248974311165512e-05, 4.6039065637160093e-05, 5.8240209909854457e-05, 7.2041606472339481e-05, 6.8622139224316925e-05, 6.2919105403125286e-05, 5.2810446504736319e-05, 8.357632759725675e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -127,47,33,-42,-42,1,-18,-33,-31,-39,11,-32,53,22,40,-69,57,-11,61,-7,57,-45,90,33,67,-7,-20,19,-67,-96,-74,16,-31,-53,8,29,-1,24,-4,18,-10,-19,-84,57,-60,-50,-10,86,-28,17,-75,-35,-4,31,58,-39,-31,-29,-33,105,26,19,16,12,-54,0,-48,59,-65,-28,35,-47,29,-7,-6,-62,-43,20,-81,-31,-62,42,101,-29,28,55,0,37,24,-69,-11,18,18,-40,-105,10, 
  /* [1][0][][] */ 44,31,37,-58,-75,1,1,25,103,-26,68,-91,55,-21,-58,-53,2,4,-65,19,-22,-73,67,57,-17,-80,-16,-34,59,-93,110,-70,49,3,-47,63,85,38,-2,-80,-10,1,-26,11,2,56,-127,-20,-46,-40,-43,-26,30,-54,-36,55,102,-7,-64,57,20,42,18,-84,-13,-43,-10,91,-66,15,-104,-62,-35,-52,87,-111,-4,77,-44,-78,-32,-68,-52,-32,40,8,-18,46,-60,-50,-56,18,21,65,-81,48, 
  /* [2][0][][] */ 121,-73,24,33,29,-72,39,31,-74,47,-18,-8,-107,-11,14,-1,-125,-27,-14,35,2,-32,-59,26,-19,-26,33,-16,-21,41,-64,92,-54,127,3,14,-10,-5,-22,-8,-66,68,69,-39,-57,14,7,-24,47,9,22,-37,49,-4,-38,54,-42,6,62,-55,7,20,-50,14,72,4,13,-82,59,23,-43,26,27,43,-10,64,51,-98,118,92,88,15,-61,32,-101,1,-6,37,-1,78,-18,5,-62,52,25,33, 
  /* [3][0][][] */ -22,6,-15,-9,42,-12,2,-100,-58,38,50,127,21,-19,-14,48,53,-32,44,31,62,104,-4,-96,45,32,-38,-9,72,-30,49,28,9,49,-9,-14,34,71,9,9,-62,-32,-19,36,-49,-13,17,10,-26,-24,-25,-59,42,-42,-6,-14,12,95,-5,33,-24,-14,-41,11,-11,115,-64,16,-17,11,23,-94,-19,-48,1,-17,29,-12,-32,-53,-32,0,-28,3,-51,-44,6,-46,6,-28,9,4,55,-10,-57,76, 
  /* [4][0][][] */ 72,16,-39,16,55,10,-74,32,-70,127,80,1,-95,19,5,-15,-26,-6,-31,59,-2,-62,49,115,-87,-6,-122,23,-54,-70,6,20,-74,-30,35,31,5,13,36,24,-2,-31,60,-113,-4,23,-28,43,-19,39,47,46,66,-12,-105,23,-23,16,29,-17,47,-7,28,24,-33,30,-49,-32,-16,-37,-66,65,40,-70,-113,-31,43,-75,55,45,-44,124,-127,-21,-49,28,36,-84,60,52,-9,18,-98,-8,81,34, 
  /* [5][0][][] */ -24,11,55,27,18,-31,18,17,17,48,-22,-45,-7,-4,-8,-23,-49,-17,44,-9,-127,0,-45,62,-57,-4,39,21,58,-45,-11,14,18,104,-8,9,10,-39,28,-9,-17,86,62,-56,25,77,56,2,6,-2,14,46,17,-22,3,-67,-6,-51,-46,-73,58,64,-39,-21,67,-101,-4,-63,-35,-25,-70,-1,-33,2,-30,-27,39,-31,-6,26,100,-4,-9,-68,-85,23,29,7,-35,75,16,-7,-45,21,56,51, 
  /* [6][0][][] */ -5,-1,-40,-7,0,-91,42,52,-111,57,-9,74,-127,-57,52,39,-23,-41,14,13,23,2,-68,-40,-33,34,63,19,20,37,59,-37,32,7,45,-35,4,30,22,52,10,-23,-47,-20,-25,-66,-43,13,2,-64,9,42,33,15,-3,-42,21,0,76,-42,-66,18,-87,18,-17,74,-33,12,64,19,1,-24,6,21,-3,41,55,-10,65,-63,10,-15,-41,68,-39,-83,3,14,-51,23,-4,-1,-42,-34,-42,80, 
  /* [7][0][][] */ -12,127,-58,-56,-26,7,68,-15,-43,-15,-36,-64,-27,0,-15,-31,-24,-3,-51,75,-8,122,77,-2,23,30,18,71,46,36,89,-67,98,8,9,46,-37,5,62,8,-56,-21,3,-64,6,-63,46,-13,43,-63,-71,-37,-44,-21,31,2,58,16,-92,32,16,126,44,3,29,18,-26,34,-57,34,-123,9,51,102,-7,21,-39,93,2,-87,-58,-31,94,-73,120,-12,-6,36,19,87,-85,37,73,-35,-34,-9, 
  /* [8][0][][] */ 10,50,-29,23,-14,-18,-67,12,-122,-21,4,-8,-32,36,37,69,14,-38,-8,-4,31,-3,10,-47,-25,44,10,7,7,1,-35,-3,-8,-38,-26,-45,-25,22,34,9,-18,-27,31,10,-30,-29,10,-14,-38,-10,33,43,-11,11,-43,75,-41,42,4,-10,-32,12,32,45,-23,-31,-22,22,-32,12,8,-10,-16,-25,-127,0,-40,18,-34,-38,-27,-13,-21,-25,-42,-7,5,40,0,39,-47,0,-64,-105,7,-36, 
  /* [9][0][][] */ 46,-27,-49,56,-41,-46,13,88,-21,81,-22,78,-60,-1,27,118,-4,27,88,45,-28,-11,59,-87,-70,-3,18,-13,31,-12,41,30,-12,18,-2,-127,46,-44,-20,-17,-27,25,25,-76,2,27,23,26,51,83,30,8,-52,-70,-7,9,-18,22,62,-4,-22,41,-48,-40,79,-56,15,15,-64,4,6,25,-28,38,-32,-20,-2,32,-17,22,45,-36,51,-26,9,-19,-15,-35,-36,15,2,-12,29,60,-4,-11, 
  /* [10][0][][] */ 11,19,-54,-31,-28,-9,65,-34,20,-75,13,-6,-43,-16,-3,-58,-18,-29,-13,8,82,11,39,-40,-4,66,-10,-15,-59,-62,-13,-21,82,-62,38,45,47,-60,74,96,-6,-70,-9,49,-43,-106,-22,68,-1,96,-102,-73,-39,22,44,42,65,-73,49,86,-11,44,-26,-11,-23,14,-19,127,-7,-1,-7,-10,125,12,64,-87,-5,-30,5,-48,-56,25,60,40,-22,6,0,39,-33,-74,22,21,44,16,-92,-11, 
  /* [11][0][][] */ -58,-14,-2,-42,13,3,-17,-30,91,-38,-12,68,33,-16,18,-17,-16,18,18,-9,-27,-13,-8,-55,-1,42,-37,64,21,-42,20,-38,12,-15,-8,-20,-67,49,-109,39,-24,70,-6,97,11,8,-38,-27,19,-41,-92,-50,11,3,93,-68,41,-62,8,-58,-47,-36,6,-99,-11,-92,33,80,105,36,127,-26,-4,-35,78,-19,88,48,-35,-20,30,-9,0,48,100,5,23,1,-41,-82,-2,-6,88,37,39,58, 
  /* [12][0][][] */ -9,22,-28,-41,34,70,-4,-1,4,12,16,84,14,46,10,-15,-11,32,8,63,126,-20,37,-69,25,9,-74,-62,-31,61,-8,4,47,-9,6,-6,35,46,-22,-19,6,-41,31,101,-33,3,-6,-10,-59,35,-27,2,-15,-23,32,13,-15,31,13,43,3,-73,30,-84,-43,127,-55,-10,7,-41,56,7,19,12,-2,33,-8,34,-88,-44,-17,18,93,18,17,49,-29,-53,58,-52,-54,45,79,-2,-54,-61, 
  /* [13][0][][] */ -45,72,-11,-49,-10,-13,0,-48,7,-48,2,-55,74,-84,-43,-61,13,-8,-64,-9,-45,-24,1,70,-12,-4,100,1,21,-17,67,40,27,-3,-74,127,-9,-20,45,-45,85,-17,-22,57,-17,-91,25,-24,65,17,-23,20,29,-15,-8,78,72,-65,-28,34,58,40,-4,-60,-39,87,-75,45,-50,-13,-72,4,-23,2,-47,-87,-60,2,14,39,-15,59,56,-57,25,29,6,-10,-38,-61,5,25,-61,-3,-56,14, 
  /* [14][0][][] */ -59,25,-82,-36,90,99,-59,-23,62,-89,92,18,70,-25,-29,-95,-43,24,4,116,38,-33,-13,-8,42,62,-46,55,-4,-28,-42,30,83,-8,-43,10,-36,127,73,43,54,-10,27,98,-12,-58,31,-53,-2,-13,-76,-33,57,0,-13,16,28,35,-119,6,-53,-87,-35,-113,-8,-55,-60,34,-64,89,44,15,24,-18,3,-37,39,13,-118,-81,25,-3,8,-12,44,44,-2,15,-27,18,86,77,58,-42,-67,-65, 
  /* [15][0][][] */ -65,-17,9,-82,50,-32,-32,-106,-81,51,22,103,-15,-21,11,84,-68,-60,20,-20,58,-8,-72,-72,51,-16,58,-69,-73,-64,-60,26,-16,32,98,-44,7,31,19,-28,-23,-17,18,38,-24,-38,52,89,-46,22,16,-66,-35,47,-5,-21,-127,-34,117,-22,-35,17,-74,16,-75,64,-76,-10,65,-81,77,3,62,-30,-87,-39,-12,0,52,-5,8,85,29,42,-19,-30,-114,-30,-35,-60,-58,48,19,-51,-66,80, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0024392700288444757, 0.0032207590993493795, 0.0022972770966589451, 0.0028920758049935102, 0.001862852368503809, 0.0033167272340506315, 0.0031687498558312654, 0.0013873806456103921, 0.0034530812408775091, 0.0019566603004932404, 0.0024752088356763124, 0.0030617683660238981, 0.0029164408333599567, 0.0026740620378404856, 0.0022444438654929399, 0.0035519937518984079, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { -3042, -1041, -4912, -2609, -1950, -4804, -3382, 232, -2022, -10328, 4782, -2660, -1706, 4896, 10337, -2996, 11079, -2294, -5118, 2901, -535, 2717, -1106, -775, -442, -10755, -109, -5530, 1767, -10281, 3200, -102, 7883, -4660, 3719, -197, 3188, -3521, -1450, 1956, 49, -289, 536, -3099, 6666, 12192, 8416, 12118, -5135, 6189, 13842, -5068, 2298, 5053, 1704, 10903, -4631, 2079, 17128, 6393, 3643, 3693, 5586, -9545, -343, -2265, -1344, 1402, -9748, -1338, -3014, -521, 8452, 1514, -1168, 9971, -1695, 2202, 8316, -5935, -184, 8492, -569, -2086, 9385, -6949, 2248, -1681, 6909, -983, 6272, 656, 6860, -246, -3304, -7746, };
const TfArray<96, float> quant10_scale = { 96, { 0.00017565526650287211, 0.00020314739958848804, 0.00011385451216483489, 0.00019171806343365461, 0.00029556479421444237, 0.00023640997824259102, 0.00032774847932159901, 0.00021054326498415321, 0.00032446614932268858, 0.00013457688328344375, 0.00010901416681008413, 0.00027972724637947977, 0.00017716785077936947, 0.00013960633077658713, 7.1030619437806308e-05, 0.00025083275977522135, 9.1333757154643536e-05, 0.00016695910017006099, 0.00015319976955652237, 0.00016444703214801848, 0.00016336124099325389, 0.00019885798974428326, 0.00030472944490611553, 0.00030037364922463894, 0.00031490562832914293, 7.9832701885607094e-05, 0.00019022375636268407, 7.7005737693980336e-05, 0.00014810546417720616, 8.8670640252530575e-05, 0.00032980661490000784, 0.00028687671874649823, 0.00013198985834605992, 0.00012616408639587462, 0.00018925603944808245, 0.00018476169498171657, 0.0001499874924775213, 0.00020495837088674307, 0.00018329484737478197, 0.00013244702131487429, 0.00020704256894532591, 0.0002616423589643091, 0.0002601754677016288, 0.00020437066268641502, 0.00013951037544757128, 0.00012222469376865774, 0.00011750841076718643, 8.5604602645616978e-05, 0.0001868539402494207, 9.2456713900901377e-05, 0.00015672831796109676, 8.3154547610320151e-05, 0.00013228593161329627, 0.00011161957081640139, 0.00013066729297861457, 0.00012214883463457227, 0.00015327453729696572, 0.00016019438044168055, 0.00012728960427921265, 0.00014200556324794888, 0.00012448283086996526, 0.00033596553839743137, 0.00013834495621267706, 9.1423935373313725e-05, 0.00010705707973102108, 0.00019773056556005031, 0.00028946693055331707, 0.00020509056048467755, 0.00015020498540252447, 0.00018948935030493885, 0.00022939161863178015, 0.00013817867147736251, 0.00012193393922643736, 0.00024894796661101282, 0.0002614163386169821, 0.00016692093049641699, 0.00010128587018698454, 0.00015222537331283092, 0.000230093311984092, 0.00021408856264315546, 0.00015577429439872503, 0.00013621838297694921, 0.00019390819943509996, 0.00011207280476810411, 0.00015736317436676472, 0.00015153699496295303, 0.00012714177137240767, 0.00013506299001164734, 0.00014827588165644556, 0.00071214226773008704, 8.6723041022196412e-05, 0.00026789959520101547, 0.00022652583720628172, 0.00018447070033289492, 0.00014632554666604847, 0.00016302381118293852, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -8,73,60,50,12,-14,17,62,53,-34,-112,70,-47,-47,13,-48,-127,15,76,86,51,25,58,116,75,-22,-95,34,-30,5,9,31,-98,27,-74,92,-58,-10,16,38,-3,-34,3,44,-127,-127,-37,-72,17,-38,-55,10,22,13,-24,-11,-109,-103,-33,-127,-69,18,-113,38,-90,82,63,-65,30,79,69,-8,-13,-7,75,-39,37,-71,-52,-4,12,-77,104,20,-85,-20,-47,46,-127,20,-100,70,23,-50,51,28, -31,-56,46,127,22,127,-49,-35,127,-5,-127,17,-47,14,-127,15,-70,103,34,90,127,-17,122,110,63,41,-6,49,-20,107,-12,-127,124,127,-35,19,33,60,-7,-88,127,20,26,67,-26,-17,102,-127,-46,-127,-87,4,37,89,-32,-67,40,7,-49,-44,-61,-70,-81,127,0,127,127,-42,122,127,127,-22,-66,72,-54,-127,76,-78,-127,127,-44,4,127,-26,35,-7,-5,31,103,82,-127,-58,127,-89,127,53, 66,-79,14,29,-18,-1,-23,7,60,115,-37,97,-33,51,-6,-51,83,81,-2,-36,50,1,20,127,80,60,40,78,-62,32,-23,-29,0,-52,-62,127,-2,118,13,43,-19,10,-3,33,-50,-118,-62,41,13,-39,-122,43,-30,-49,3,58,84,-126,-90,-99,-87,33,-62,74,54,46,-44,11,-16,9,49,-42,-75,-29,-17,-55,115,-72,-49,30,-20,-52,29,24,-108,-11,23,-80,-82,-8,-15,70,-47,23,24,13, 
  /* [0][1][][] */ 63,18,51,40,-40,-52,127,48,-3,-51,-75,55,-13,-127,-53,20,-117,-39,104,-2,-120,-12,-127,-89,6,109,-127,127,-99,89,106,89,-22,22,26,118,-127,56,-3,17,34,-127,39,23,-67,-16,-41,-89,-29,-60,-28,5,127,-81,95,-31,-127,-17,-79,-22,-26,-29,-29,11,-125,-19,7,-127,-51,-29,-19,-123,-105,24,127,-56,127,57,-32,-48,127,-93,-12,127,48,7,-56,51,-53,40,-82,98,-20,-84,57,30, -127,-40,10,11,-54,-102,-106,-127,125,7,-29,-9,-41,-37,-119,127,-94,-127,127,53,-15,-127,-98,27,-127,127,25,84,-127,35,-127,36,-13,116,127,-46,-19,127,127,-91,-27,-13,-4,9,32,-42,-127,-69,51,-98,-30,127,7,37,49,-127,26,49,92,45,58,31,-85,50,-38,-121,35,98,92,29,-57,-29,-9,40,-98,-15,54,127,122,-15,-105,127,-103,77,-81,-30,65,127,90,127,-63,-127,-106,-65,-28,127, 105,51,71,58,-11,9,33,-39,-53,127,-55,127,-44,0,-121,-36,68,8,9,-31,-77,-30,-107,-41,-30,111,103,69,118,102,18,-74,50,-94,-20,102,-93,4,-12,-23,-16,59,59,127,54,-50,-63,-88,127,-91,-66,-20,52,-127,-114,-19,110,-3,-69,10,55,-6,39,75,127,-36,-48,4,-127,-30,-14,-29,-127,-127,-3,-126,53,-22,-110,-19,-69,-103,14,98,-29,30,47,-92,-64,7,36,70,3,127,64,19, 
  /* [0][2][][] */ 68,-61,80,-67,-20,36,64,79,-22,33,2,54,65,-14,-3,45,-62,14,-11,54,-9,76,21,-86,90,51,-21,-29,-29,-23,-12,24,-127,18,-62,31,19,99,43,-127,-11,43,-9,100,-3,-27,-1,14,-39,37,-49,70,-14,-31,-85,-49,4,5,-127,94,-57,7,-4,23,-101,46,-92,27,31,-10,19,79,29,-31,35,-46,-8,-44,-66,46,39,-68,-70,31,-48,59,-127,-5,-104,60,32,-4,-67,30,-26,-19, -98,2,127,-15,127,95,-23,39,-81,33,-72,-7,127,31,6,31,-1,22,-27,-127,15,3,57,-54,69,-65,49,22,-71,127,-30,-12,-113,68,21,12,18,108,19,-79,-5,13,-127,9,54,5,-75,-59,-5,-23,-127,93,24,-77,-127,-74,9,127,-82,-1,71,-127,127,21,-41,24,-6,10,80,8,38,56,-25,15,-5,-14,6,-126,-73,19,-50,12,-94,-27,-127,127,-50,15,49,11,59,12,-58,-7,-16,30, 79,127,-25,-4,34,81,22,46,-32,117,68,-41,53,-33,-41,14,12,5,-41,-40,-19,50,47,-79,48,47,39,49,93,14,-29,-106,-25,21,-80,-63,67,79,-30,16,-19,37,31,42,-33,-99,-75,-20,64,-2,11,108,-62,-77,-23,9,37,14,22,34,127,13,45,18,43,63,-61,78,112,-22,-17,127,38,-50,-19,40,-38,31,16,44,4,-103,14,45,64,61,-111,-81,-97,-16,33,7,-65,79,-15,27, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0074653485789895058, 0.008633764460682869, 0.0048388168215751648, 0.0081480173394083977, 0.012561503797769547, 0.010047423653304577, 0.013929310254752636, 0.0089480886235833168, 0.013789811171591282, 0.005719517357647419, 0.0046331021003425121, 0.011888407170772552, 0.0075296335853636265, 0.0059332689270377159, 0.0030188013333827257, 0.010660392232239246, 0.0038816845044493675, 0.0070957615971565247, 0.0065109902061522007, 0.0069889985024929047, 0.0069428528659045696, 0.0084514645859599113, 0.012951001524925232, 0.012765879742801189, 0.013383489102125168, 0.0033928896300494671, 0.0080845095217227936, 0.00327274389564991, 0.0062944819219410419, 0.0037685022689402103, 0.014016781002283096, 0.012192260473966599, 0.0056095686741173267, 0.0053619733080267906, 0.0080433813855051994, 0.0078523717820644379, 0.0063744685612618923, 0.0087107308208942413, 0.007790030911564827, 0.0056289983913302422, 0.0087993089109659195, 0.011119799688458443, 0.011057456955313683, 0.0086857527494430542, 0.0059291906654834747, 0.005194549448788166, 0.0049941074103116989, 0.0036381955724209547, 0.0079412925988435745, 0.0039294101297855377, 0.006660953164100647, 0.0035340681206434965, 0.0056221517734229565, 0.0047438316978514194, 0.0055533596314489841, 0.0051913256756961346, 0.0065141674131155014, 0.0068082609213888645, 0.0054098078981041908, 0.0060352361761033535, 0.0052905203774571419, 0.014278534799814224, 0.005879660602658987, 0.0038855171296745539, 0.0045499256812036037, 0.0084035489708185196, 0.012302343733608723, 0.0087163485586643219, 0.0063837119378149509, 0.0080532971769571304, 0.0097491433843970299, 0.0058725937269628048, 0.0051821921952068806, 0.010580288246273994, 0.011110194027423859, 0.0070941396988928318, 0.0043046493083238602, 0.0064695784822106361, 0.0097789652645587921, 0.0090987635776400566, 0.0066204075701534748, 0.0057892813347280025, 0.0082410983741283417, 0.0047630942426621914, 0.0066879349760711193, 0.0064403223805129528, 0.0054035251960158348, 0.0057401768863201141, 0.0063017248176038265, 0.030266044661402702, 0.0036857291124761105, 0.01138573233038187, 0.0096273478120565414, 0.0078400047495961189, 0.006218835711479187, 0.0069285118952393532, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 2424, 1658, 1097, -1058, 5613, 10633, 16039, 1126, -2212, 3437, -98, -4738, 1211, 1467, 285, -242, 3471, 4351, 179, -1302, 2519, 5277, 23073, -3178, -3557, -526, 7340, -448, 1609, 1113, 9932, -1887, 4483, 1752, 7283, -2390, 2475, -3262, 491, 3418, 3451, 1095, 2693, -1204, 1217, 964, 3189, 7042, 1746, 2566, 6994, 1460, -1830, 3761, 1335, 3459, 1766, 2557, 7425, 1305, -868, 5375, 4362, 4605, 4686, 1579, -3931, 1899, 3234, -791, 3720, 1993, 771, 7240, 2215, 2396, -622, 2356, 3080, 2308, 2809, 2053, 6740, -146, 1047, 4064, 447, -297, 21475, -3771, 921, -4519, 10682, 3896, -249, -1342, };
const TfArray<96, float> quant12_scale = { 96, { 0.00021040739375166595, 0.00022974819876253605, 0.00021604298672173172, 0.00019208957382943481, 0.00010175416537094861, 8.3418752183206379e-05, 6.6270527895539999e-05, 0.00021690585708711296, 0.00013756555563304573, 0.0001477825571782887, 0.00014176120748743415, 0.00011787732364609838, 0.00019926209643017501, 0.00023064856941346079, 0.00014287813974078745, 0.00026042643003165722, 0.00015345378778874874, 0.00017538582324050367, 0.00016010101535357535, 0.00012091825919924304, 0.00020440368098206818, 0.00014029718295205384, 4.798071677214466e-05, 0.00015031159273348749, 0.00014675060810986906, 0.00022616627393290401, 0.00011659931624308228, 0.00012093914847355336, 0.00021396455122157931, 0.00017588381888344884, 9.6842501079663634e-05, 0.00019772720406763256, 0.0001259503624169156, 0.00022094648738857359, 0.00011200171866221353, 0.00021717206982430071, 0.00013970966392662376, 0.0001786356297088787, 0.00021537039719987661, 0.00011154800449730828, 0.00014189592911861837, 0.00023189117200672626, 0.00018687541887629777, 0.00016685848822817206, 0.00015663767408113927, 0.00019049413094762713, 0.00019142526434734464, 9.7130578069481999e-05, 0.00025344736059196293, 0.00016707803297322243, 9.9156604846939445e-05, 0.00017139225383289158, 0.00017331582785118371, 0.00012783212878275663, 0.00012761616380885243, 0.00013559147191699594, 0.00015627533139195293, 0.00016329622303601354, 0.00010817537986440584, 0.00015554578567389399, 0.0002367111446801573, 0.00011871011520270258, 0.00014230266970116645, 0.00014910561731085181, 0.00011408869613660499, 0.00024367294099647552, 0.00015640410128980875, 0.00017516642401460558, 0.00018394344078842551, 0.00020282850891817361, 0.00017259182641282678, 0.00013066522660665214, 0.00021836967789568007, 8.6936495790723711e-05, 0.00015267184062395245, 0.00015157918096520007, 0.0001714501267997548, 0.00015701646043453366, 0.00016010434774216264, 0.00016700719424989074, 0.00015976741269696504, 0.00015348922170232981, 9.7717820608522743e-05, 0.00016052067803684622, 0.00016878229507710785, 0.00015176195302046835, 0.00012960555613972247, 0.00023919105296954513, 4.5783988753100857e-05, 0.00011980775161646307, 0.00015339914534706622, 0.00010736342665040866, 7.7250326285138726e-05, 0.0001510584115749225, 0.00026851831353269517, 0.00013522087829187512, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -6,29,-65,-106,-23,-62,-52,-127,52,-50,67,-54,102,-63,2,-123, 
  /* [1][0][][] */ -86,61,-127,-35,-36,-12,-45,98,-38,1,46,-46,-25,109,93,74, 
  /* [2][0][][] */ -75,-18,-73,-32,-28,10,25,-29,-70,78,58,16,-15,20,-41,127, 
  /* [3][0][][] */ -83,-127,32,-57,-34,3,-47,-94,-16,-5,47,-76,-35,-16,-88,-26, 
  /* [4][0][][] */ 66,21,-106,127,-33,74,-62,34,49,110,75,56,-20,68,-45,-109, 
  /* [5][0][][] */ -39,25,-100,-4,47,-41,-32,-15,127,53,-14,-76,25,-120,-72,-53, 
  /* [6][0][][] */ -36,-32,-36,78,-127,83,42,-33,-28,-27,95,-49,-48,26,-78,-39, 
  /* [7][0][][] */ -25,127,70,-102,14,73,-7,-41,10,53,-79,25,-12,-9,2,25, 
  /* [8][0][][] */ 30,8,29,29,96,78,25,25,-20,30,-18,-106,23,8,-127,-68, 
  /* [9][0][][] */ -12,-12,75,-7,-80,-81,-2,-69,70,9,127,-7,-10,-61,45,-40, 
  /* [10][0][][] */ 40,-62,-36,-86,-123,61,60,65,-17,-66,39,63,25,67,-127,60, 
  /* [11][0][][] */ 111,-76,87,12,-116,-22,34,-83,32,117,-61,54,63,-127,-68,65, 
  /* [12][0][][] */ -86,-127,58,33,57,-21,9,16,74,-33,-10,-8,-44,-8,-58,64, 
  /* [13][0][][] */ 49,-15,0,27,40,-13,127,19,-77,8,37,1,10,97,93,-54, 
  /* [14][0][][] */ 20,-127,46,89,96,100,57,96,93,55,24,-12,16,4,26,-74, 
  /* [15][0][][] */ -20,122,23,-39,49,79,-28,61,9,18,36,4,-16,127,-54,-82, 
  /* [16][0][][] */ -25,71,127,-34,6,51,-19,-46,13,-6,1,46,98,-19,73,65, 
  /* [17][0][][] */ -5,79,38,-55,20,-30,1,19,-127,40,-12,30,-12,30,72,-62, 
  /* [18][0][][] */ -54,19,-86,-86,109,21,-79,-16,24,78,127,78,-17,52,-88,-15, 
  /* [19][0][][] */ 52,127,68,41,33,-47,-32,-2,-59,102,41,127,27,43,-55,52, 
  /* [20][0][][] */ 68,10,48,43,-100,22,-31,111,-29,-23,-127,-102,64,-30,39,-25, 
  /* [21][0][][] */ -51,-18,-40,127,-18,7,-102,52,-12,2,-6,79,-36,36,-63,-15, 
  /* [22][0][][] */ 16,-19,-12,-14,127,-13,-45,13,84,75,-4,-1,-13,-11,-30,-1, 
  /* [23][0][][] */ -87,30,-41,18,-2,108,68,89,-22,127,48,-29,10,24,-40,-8, 
  /* [24][0][][] */ 30,-40,6,23,127,-1,62,17,79,-36,-30,-16,-48,13,-22,-34, 
  /* [25][0][][] */ 125,-23,58,53,-25,-17,-21,93,75,-40,-66,19,127,-70,49,31, 
  /* [26][0][][] */ 12,15,15,77,11,4,-2,2,15,77,24,127,7,-43,15,-31, 
  /* [27][0][][] */ -61,22,-66,14,-93,71,77,-34,5,-127,59,-3,117,16,95,114, 
  /* [28][0][][] */ -56,-19,-34,-66,30,-15,0,-87,-40,103,-127,5,22,33,-1,18, 
  /* [29][0][][] */ 127,94,-84,25,80,38,-32,-7,46,4,25,56,-94,14,-31,49, 
  /* [30][0][][] */ -28,127,-118,-52,15,0,-13,36,-65,39,-66,-25,-40,65,8,28, 
  /* [31][0][][] */ 33,-59,46,-2,102,-27,-45,47,-1,11,18,-86,-26,24,2,127, 
  /* [32][0][][] */ -81,120,49,55,-127,78,-45,11,-53,-51,84,-36,-15,-17,63,24, 
  /* [33][0][][] */ -24,-15,17,84,9,49,-72,7,-50,-54,9,-7,15,-32,-5,127, 
  /* [34][0][][] */ 30,35,-82,-127,39,24,-71,29,44,31,-19,-19,-62,-89,-62,103, 
  /* [35][0][][] */ 39,-9,40,15,6,19,-53,0,-2,-127,-32,-24,-8,-32,50,22, 
  /* [36][0][][] */ -33,-16,-21,-45,-43,127,2,37,21,7,43,48,24,-42,-83,96, 
  /* [37][0][][] */ 12,-7,38,-40,63,-106,-27,-10,-127,20,-67,3,-39,18,76,8, 
  /* [38][0][][] */ -46,83,28,-49,45,48,66,-112,45,-21,-81,40,-69,-127,-96,13, 
  /* [39][0][][] */ 26,3,-123,-124,-26,51,-20,-98,-66,-36,-46,-98,118,-29,-127,-2, 
  /* [40][0][][] */ -50,83,-87,-63,-97,-3,29,-127,-67,1,18,-72,40,45,119,95, 
  /* [41][0][][] */ -16,-38,-18,107,3,-26,-51,-7,17,-38,127,-52,-25,-31,19,7, 
  /* [42][0][][] */ -24,36,-6,-127,-4,18,1,-7,24,-3,-38,33,87,24,15,38, 
  /* [43][0][][] */ 4,45,0,-11,127,11,4,15,32,19,-70,-95,-106,-52,-38,-6, 
  /* [44][0][][] */ 122,-12,38,65,-89,-47,34,68,127,-27,64,54,116,44,-72,-65, 
  /* [45][0][][] */ 47,-29,-127,9,45,-74,25,31,26,0,-40,5,-61,68,34,-49, 
  /* [46][0][][] */ 14,-59,79,21,-27,-31,-127,64,18,-10,21,-68,68,66,73,57, 
  /* [47][0][][] */ -52,-90,31,82,21,-18,45,43,-25,-127,-122,-44,57,0,-81,33, 
  /* [48][0][][] */ -5,94,-58,-9,-29,26,-7,-81,18,-42,21,-20,18,-127,12,-24, 
  /* [49][0][][] */ -46,-6,24,-36,4,25,127,96,-41,-59,-17,27,-30,48,-50,32, 
  /* [50][0][][] */ 110,42,-103,-6,72,-84,-47,14,-103,50,-127,4,1,-89,-59,-43, 
  /* [51][0][][] */ -40,81,0,120,-60,61,-43,-127,-64,-89,-12,-61,22,10,-31,110, 
  /* [52][0][][] */ -127,-59,15,-42,21,7,24,42,25,-56,-31,-53,-110,-13,-76,-12, 
  /* [53][0][][] */ -58,-48,-63,-127,-74,0,20,51,45,-61,-74,17,-9,35,44,111, 
  /* [54][0][][] */ 24,-24,26,-22,-113,127,71,-96,-67,-101,44,-2,-17,-62,-121,47, 
  /* [55][0][][] */ -14,-5,-62,25,55,-108,79,127,-66,-60,-81,-24,61,-44,24,57, 
  /* [56][0][][] */ 38,-98,-19,40,-115,37,-101,-15,-38,-39,-79,39,127,-49,8,83, 
  /* [57][0][][] */ -74,10,22,-30,42,51,39,50,-21,77,-30,-35,-43,127,-92,-15, 
  /* [58][0][][] */ 7,0,-8,-34,36,27,-77,-49,44,-127,-70,-37,-109,-62,-45,60, 
  /* [59][0][][] */ -91,-73,12,-3,2,34,-81,-43,94,127,-83,40,-49,34,-27,29, 
  /* [60][0][][] */ 45,-11,-31,37,-127,-15,13,-28,-34,18,-2,34,3,-29,-15,11, 
  /* [61][0][][] */ 24,71,-75,-36,-28,-1,-127,-46,-64,20,-1,75,17,-42,97,57, 
  /* [62][0][][] */ 75,14,59,-35,-6,-41,24,127,-40,87,38,52,17,25,106,44, 
  /* [63][0][][] */ -5,-126,12,4,-62,6,47,-14,11,-1,28,-13,-10,127,108,42, 
  /* [64][0][][] */ -49,-36,-119,5,93,85,20,-63,-4,-127,16,-11,111,14,-38,45, 
  /* [65][0][][] */ 14,-6,50,69,38,-61,50,72,-22,-3,-17,-51,56,127,27,-1, 
  /* [66][0][][] */ -27,-127,-5,-92,-58,-97,63,24,10,-44,17,53,-68,-31,-76,43, 
  /* [67][0][][] */ -61,-127,1,-58,-69,62,-7,-79,3,-11,-20,-60,45,-20,-43,59, 
  /* [68][0][][] */ 74,9,47,75,-48,30,-127,-40,-13,-105,10,-2,21,-43,65,-76, 
  /* [69][0][][] */ 23,-17,50,-48,3,-48,-46,17,-30,127,-6,14,24,-2,37,-24, 
  /* [70][0][][] */ 62,3,-23,53,-127,-2,2,-37,58,63,8,30,39,-17,-5,0, 
  /* [71][0][][] */ 80,-18,103,94,-127,-17,92,-68,74,-67,-27,13,88,-100,79,31, 
  /* [72][0][][] */ -14,-34,33,29,17,-14,-127,30,56,-3,34,15,-72,-64,-59,3, 
  /* [73][0][][] */ 78,-17,67,-127,55,-110,-80,81,5,114,-29,-36,10,-89,-19,-28, 
  /* [74][0][][] */ 47,-12,21,36,-91,79,59,1,-94,-119,46,-127,52,-57,-16,22, 
  /* [75][0][][] */ 60,102,-116,20,73,63,18,-15,-8,-56,16,-23,-127,35,27,32, 
  /* [76][0][][] */ -63,-54,19,-74,-59,-27,58,19,-33,43,79,63,-12,-127,-53,66, 
  /* [77][0][][] */ -108,75,33,-23,-99,44,127,-10,34,-4,15,-29,-2,47,-28,64, 
  /* [78][0][][] */ 89,53,-100,-33,-4,13,-127,37,-34,20,-48,-22,-15,-26,-16,11, 
  /* [79][0][][] */ -63,-103,108,69,-49,-127,-74,-99,11,-13,46,37,-111,29,-35,47, 
  /* [80][0][][] */ 2,33,86,-126,13,33,127,21,68,-9,-72,-5,5,-24,25,3, 
  /* [81][0][][] */ 31,-35,25,-100,99,32,-46,115,127,19,35,-49,-13,-20,-70,-79, 
  /* [82][0][][] */ 106,93,14,-43,72,-44,-58,77,-27,127,16,44,-28,17,-19,-123, 
  /* [83][0][][] */ 7,39,59,30,127,-14,100,64,13,6,-37,-81,-80,88,-62,-75, 
  /* [84][0][][] */ 7,-75,-19,127,-40,-91,-81,49,-14,65,-15,71,-75,13,1,-57, 
  /* [85][0][][] */ -105,64,-64,-1,14,-64,-54,-36,4,33,2,-127,-107,-69,-22,41, 
  /* [86][0][][] */ 14,6,98,127,58,-48,106,50,42,28,-12,-92,78,122,-79,-54, 
  /* [87][0][][] */ 8,44,127,-42,-77,-9,35,-10,28,-25,3,22,5,9,6,31, 
  /* [88][0][][] */ -46,-78,-76,20,62,30,-67,9,-20,-97,-127,-91,65,-16,-6,26, 
  /* [89][0][][] */ 33,34,33,-127,18,-78,-23,75,82,-10,59,-87,14,13,29,-26, 
  /* [90][0][][] */ -3,42,127,4,-73,19,41,90,30,-73,-30,72,63,-15,-19,68, 
  /* [91][0][][] */ -30,26,-63,103,73,122,-28,-99,-70,-27,-89,35,-60,-127,-69,-14, 
  /* [92][0][][] */ 12,74,-3,-49,-127,17,-121,-37,-104,38,35,9,-11,-48,64,-37, 
  /* [93][0][][] */ 82,99,127,57,-97,-57,-18,0,-8,-54,-55,-68,32,-52,-16,-12, 
  /* [94][0][][] */ -66,-127,21,-126,-30,35,-34,-14,42,-14,14,63,-18,30,-19,62, 
  /* [95][0][][] */ -53,-62,-48,-41,98,116,-11,54,122,62,-43,24,-25,127,-47,33, 
};
const TfArray<96, float> quant13_scale = { 96, { 0.0027769587468355894, 0.0030322188977152109, 0.0028513374272733927, 0.0025351999793201685, 0.0013429524842649698, 0.0011009614681825042, 0.00087463908130303025, 0.0028627256397157907, 0.0018155914731323719, 0.001950435689650476, 0.0018709658179432154, 0.0015557460719719529, 0.0026298630982637405, 0.0030441021081060171, 0.0018857071409001946, 0.0034371106885373592, 0.0020252845715731382, 0.0023147438187152147, 0.002113014692440629, 0.0015958803705871105, 0.0026977218221873045, 0.0018516435520723462, 0.00063324999064207077, 0.0019838139414787292, 0.0019368159119039774, 0.0029849447309970856, 0.001538878888823092, 0.0015961560420691967, 0.0028239062521606684, 0.0023213163949549198, 0.0012781282421201468, 0.0026096056681126356, 0.0016622941475361586, 0.002916053868830204, 0.0014781997306272388, 0.0028662390541285276, 0.0018438895931467414, 0.0023576347157359123, 0.0028424605261534452, 0.0014722116757184267, 0.0018727438291534781, 0.0030605020001530647, 0.0024663836229592562, 0.0022022000048309565, 0.002067305613309145, 0.0025141434744000435, 0.0025264325086027384, 0.0012819303665310144, 0.0033450007904320955, 0.0022050975821912289, 0.0013086698018014431, 0.0022620365489274263, 0.002287423936650157, 0.0016871296102181077, 0.001684279297478497, 0.0017895376076921821, 0.0020625232718884945, 0.0021551852114498615, 0.001427699695341289, 0.0020528947934508324, 0.003124115988612175, 0.0015667373081669211, 0.0018781119724735618, 0.0019678974058479071, 0.0015057437121868134, 0.0032159979455173016, 0.0020642229355871677, 0.0023118481040000916, 0.0024276874028146267, 0.0026769326068460941, 0.0022778685670346022, 0.0017245209310203791, 0.0028820452280342579, 0.0011473887134343386, 0.0020149643532931805, 0.0020005435217171907, 0.0022628004662692547, 0.0020723047200590372, 0.0021130586974322796, 0.0022041625343263149, 0.0021086118649691343, 0.0020257523283362389, 0.0012896807165816426, 0.0021185535006225109, 0.0022275904193520546, 0.0020029556471854448, 0.0017105354927480221, 0.0031568459235131741, 0.00060425751144066453, 0.0015812239143997431, 0.0020245634950697422, 0.0014169835485517979, 0.0010195506038144231, 0.0019936703611165285, 0.0035439073108136654, 0.0017846464179456234, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -24157, -1604, 7411, -16767, 4090, -6268, 31274, -30465, 19813, -6044, 15976, 7170, -8176, -28071, -32, 10642, };
const TfArray<16, float> quant14_scale = { 16, { 7.7011754910927266e-05, 7.361046300502494e-05, 3.7922065530437976e-05, 6.1477549024857581e-05, 7.7433323895093054e-05, 0.0001296268601436168, 5.4019423259887844e-05, 3.6312951124273241e-05, 8.5866035078652203e-05, 9.2783549916930497e-05, 0.00011434470798121765, 8.5547020717058331e-05, 5.7974244555225596e-05, 5.3408821258926764e-05, 6.2788567447569221e-05, 5.3523515816777945e-05, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 29,29,3,-9,-26,-88,13,8,-27,-49,-5,5,56,-53,38,32,-56,-38,36,58,60,20,-68,-7,26,76,92,52,-13,74,63,-26,4,-3,36,2,47,31,-29,23,127,31,31,-16,-25,-17,-18,-31,47,-16,81,-43,-45,18,-3,32,-16,-20,4,13,3,75,-49,-34,18,11,34,-5,-19,-28,38,32,14,22,12,41,54,-28,30,28,15,19,28,36,-40,-7,-11,81,31,-6,-86,-29,3,43,85,70, 
  /* [1][0][][] */ 38,35,-35,-38,-10,-55,62,-58,-42,-16,-38,-58,8,-26,-9,-31,-37,-17,-4,40,-14,-49,61,-38,-15,24,-9,46,-44,19,-36,18,-20,28,33,-10,-26,41,-65,74,28,3,15,-28,35,-45,-39,36,-35,12,45,-127,6,44,43,44,-9,14,-68,9,-26,64,11,-32,14,-1,68,-13,-46,-107,7,-9,11,0,-1,31,-27,-17,62,5,43,-9,34,-39,0,-52,-11,10,17,-7,1,-27,43,-35,-24,53, 
  /* [2][0][][] */ -21,-46,38,26,110,89,-55,30,-36,25,-30,-5,-6,-7,18,53,48,-17,-127,-38,-14,-18,5,51,26,-28,-54,12,-3,-27,24,81,-6,-89,-1,40,-76,35,30,-47,54,29,13,-7,-19,48,32,1,-111,-29,-1,103,-69,28,29,-43,58,12,63,8,-26,-60,-61,74,27,-15,-38,18,-3,16,-52,-24,54,105,26,63,-66,-21,-6,-72,3,9,24,-42,-7,-65,-12,-40,-55,-51,4,99,-11,10,92,-105, 
  /* [3][0][][] */ 56,-63,-34,-105,-29,-32,111,-14,18,127,-84,-45,37,-8,-6,69,65,27,-16,49,-59,18,24,0,10,80,47,-34,-5,8,-37,44,4,-53,65,-25,20,-22,-5,71,57,46,-8,43,19,-78,-21,81,89,-75,61,-63,99,65,9,67,-46,-8,-26,-14,-82,46,71,-52,-40,1,99,-80,-38,-31,-56,-11,28,-75,3,-57,50,-41,124,3,35,-49,-45,-71,-23,-48,71,100,-15,23,-49,15,-47,15,-19,80, 
  /* [4][0][][] */ -3,45,19,14,5,17,-20,-39,14,-31,9,-30,25,32,-22,36,-24,-59,-20,-56,24,-2,-47,21,-36,6,-7,-4,-64,127,-40,-21,-20,-11,8,-82,75,75,-57,7,63,7,5,-39,-35,-42,90,-23,32,-20,-56,-12,-65,54,74,9,-28,28,-43,58,-15,-92,-11,-6,40,19,-6,30,30,-15,-22,-79,9,47,41,63,-29,23,-30,38,5,55,21,-52,43,-75,-24,-69,-29,-48,-56,-28,-29,-46,42,-49, 
  /* [5][0][][] */ -1,-15,36,-7,-9,11,-13,-21,46,14,3,-14,-33,-19,30,-19,-14,12,-38,-45,-20,15,-2,21,24,-43,47,-7,-9,25,-6,63,-21,-75,1,-29,-84,-27,-34,-22,-62,-7,-32,-2,17,7,-57,15,-38,14,36,-40,30,-79,28,2,-21,-51,2,-45,22,16,10,60,-48,-11,99,-7,0,-34,13,2,4,29,26,0,-16,-10,127,22,-34,-12,-12,12,42,53,-7,72,-2,-20,-14,-1,9,-10,-19,-4, 
  /* [6][0][][] */ -4,-66,46,34,-19,96,9,-51,-53,-83,-94,87,-16,32,-57,85,6,52,35,-22,-53,-23,-75,-69,40,-60,30,57,-90,66,45,1,28,38,7,30,3,-17,46,-38,-38,41,36,-49,16,-6,-100,-8,23,-6,-58,-127,53,11,-60,-17,18,-33,37,-10,1,-31,38,-11,10,-42,-104,-61,-70,41,-28,-79,4,-97,18,-60,39,-4,-94,-2,-45,51,6,-102,75,-65,-2,-4,-87,36,-47,50,-13,-8,66,-104, 
  /* [7][0][][] */ -9,2,-71,84,9,-8,91,-10,-92,8,59,100,40,-71,14,-4,-3,-32,34,20,-15,7,-25,-46,72,85,24,56,30,53,96,11,-50,-114,39,85,-11,38,-74,37,63,27,16,-75,37,82,98,64,12,59,-15,12,44,4,14,-46,-1,73,-111,39,40,7,8,-63,96,-34,127,-4,-2,-53,96,31,2,-45,-79,-33,38,-57,114,-69,13,-3,-27,-22,55,-12,-82,82,-19,23,24,27,82,-26,70,14, 
  /* [8][0][][] */ -9,-68,-2,-33,-7,-44,40,30,-57,-12,48,74,-5,49,-71,-5,33,53,0,-2,-12,-91,-47,-32,0,-30,87,16,-38,42,8,-15,-18,15,4,43,-35,-25,-3,-30,0,5,35,-32,28,-1,5,-37,15,-7,23,20,-62,6,-58,-12,23,83,-26,-16,-2,-65,-31,-9,-80,-27,-2,-11,-39,60,59,-38,-23,-127,25,-120,-7,35,-75,-1,-40,-29,-7,38,69,-80,-25,26,-44,70,30,-33,-39,43,-4,-46, 
  /* [9][0][][] */ -21,-38,-24,3,0,10,-25,44,-49,-29,67,51,-28,29,24,-65,-8,59,-19,-31,15,34,13,-6,13,18,16,17,26,-28,-25,-24,-18,-1,-13,67,-24,-36,10,-2,-12,-20,-39,47,9,36,-6,19,-27,10,-18,28,107,5,13,-8,27,-15,24,17,-34,-19,100,36,19,25,70,-4,15,-24,-32,14,24,-109,-43,-127,-23,-3,34,2,10,20,28,-50,23,5,-52,0,2,116,32,18,60,57,-7,52, 
  /* [10][0][][] */ 26,31,-7,-26,-65,-12,-63,15,45,1,-34,14,5,-12,-24,-39,-12,-6,21,-1,-18,-33,2,-32,1,-47,-80,30,-14,53,-28,-4,13,27,-14,27,20,1,-15,21,21,-23,46,-14,-28,12,20,15,21,1,26,-15,11,3,-25,31,0,24,15,-41,-21,-31,19,-10,3,-16,-113,-50,-56,-4,75,-2,-52,16,45,10,52,-12,-90,21,6,28,8,13,-20,4,-39,-127,-24,36,26,47,63,-20,-2,45, 
  /* [11][0][][] */ 11,-4,17,-4,-79,13,10,-5,57,16,-28,-41,33,0,2,29,-3,32,21,-32,-16,33,3,-26,30,15,65,11,11,-23,20,32,18,94,-78,31,48,-10,57,1,-47,34,-36,17,-17,37,6,-9,42,-4,-22,-3,17,15,-61,42,-32,-25,22,-30,49,5,2,-44,5,-16,-127,-63,-5,11,-55,27,16,-15,-18,3,14,52,-80,-10,-4,-12,-32,1,-16,-12,66,41,26,-12,-4,27,-20,35,71,7, 
  /* [12][0][][] */ 3,39,-25,-16,6,-12,28,73,68,-29,-11,1,3,-32,13,-1,26,-58,-21,63,29,53,-22,34,-35,-35,-127,-9,84,-40,80,22,-4,-94,104,11,47,-20,42,17,13,-49,26,36,31,17,-7,-16,-64,28,-53,94,89,-19,-10,-69,1,1,-15,-28,38,85,88,-6,-6,22,-7,2,112,43,43,42,9,-26,-41,-3,-56,-80,32,-79,40,-70,14,-46,18,-5,5,-107,-13,26,-36,21,0,86,10,48, 
  /* [13][0][][] */ 16,33,-48,43,35,1,32,22,17,70,-68,42,-51,-12,114,-65,36,67,83,10,-6,-69,-15,10,93,24,-22,19,-2,61,78,-4,-10,75,-38,52,24,-48,-72,-15,14,-10,-7,31,90,53,-54,77,-57,44,18,65,-12,-31,80,72,-19,-68,44,-18,-6,-53,7,-36,24,127,80,19,50,21,-58,-15,-2,54,-94,21,9,-100,107,-98,-21,-23,-1,-21,62,49,-55,-2,-36,-8,16,89,27,4,57,103, 
  /* [14][0][][] */ 1,61,-4,11,-33,-65,55,26,-67,-3,24,-8,-61,-9,75,-4,-38,-15,-31,22,-36,4,-122,-9,-31,16,-62,-71,-11,16,73,64,-42,28,53,4,14,-63,39,-15,1,-27,79,-61,-31,53,-76,33,4,-16,62,30,8,39,-40,37,-62,25,26,30,61,84,-13,12,13,-42,-23,-68,55,68,60,36,-61,22,-2,28,10,-23,18,-22,-58,127,-5,-113,55,-33,-9,19,-71,-34,-17,-15,-13,15,29,26, 
  /* [15][0][][] */ 49,-28,42,56,77,-14,-18,-8,31,-18,-98,-19,69,50,-18,-52,24,-16,-80,41,-3,-25,39,41,7,-82,112,-2,74,-62,-12,23,116,16,-17,-74,64,78,111,12,74,40,-14,14,-55,-127,38,-56,-17,-18,-48,39,20,-57,-57,36,-22,-2,34,33,-4,-118,-73,52,33,80,-79,75,8,-42,-40,2,-18,-124,-69,-127,-13,-2,-123,11,65,-21,26,19,-71,-4,-14,-48,50,93,21,-64,-64,-2,0,-44, 
};
const TfArray<16, float> quant15_scale = { 16, { 0.0032729995436966419, 0.0031284445431083441, 0.001611687708646059, 0.0026127959135919809, 0.0032909160945564508, 0.0055091413669288158, 0.0022958253975957632, 0.0015433004591614008, 0.003649306483566761, 0.0039433008059859276, 0.0048596500419080257, 0.0036357482895255089, 0.0024639053735882044, 0.0022698747925460339, 0.0026685139164328575, 0.0022747493349015713, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 10410, -856, -4959, 10274, -271, 3813, 2384, 2606, 8062, -2731, 72, -3455, 8015, -4958, 951, -9248, 4272, 173, -7213, 2938, -3806, 1731, -5670, -4642, 77, 16683, -15663, 3417, 3083, -5833, -2465, -4445, 17736, 2762, 7080, -1700, 4102, 9835, -2716, 5683, 9905, 2959, -3950, 5693, -524, -1674, 8002, 1150, -6606, 1488, -5505, -732, -16, -2269, 194, 4251, -913, -204, -346, 2432, 3468, -683, 279, 16786, 6782, 4630, 9875, 9035, 1721, 161, 9604, -929, -313, 3924, -1652, 1219, 13585, -1779, 7347, 4694, 11094, -848, 2454, 15618, -503, 1839, 10908, -3974, 2290, 750, -3867, -3620, -132, -2922, 19277, 831, };
const TfArray<96, float> quant16_scale = { 96, { 7.4281488195993006e-05, 0.00028472320991568267, 0.00016592499741818756, 0.00013626125291921198, 0.00023783266078680754, 0.00043786922469735146, 0.00011040198296541348, 0.00014462930266745389, 0.00016617360233794898, 0.00023683025210630149, 0.00022101495414972305, 0.0002135735412593931, 0.00015040910511743277, 0.00017603636661078781, 0.00021135155111551285, 0.00010911513527389616, 0.00017805260722525418, 0.00034083207719959319, 0.0001794351264834404, 0.00029794772854074836, 0.00017969989858102053, 0.00024077971465885639, 0.00014559128612745553, 0.00013479863991960883, 0.0015173266874626279, 0.00010551774175837636, 0.00011833245662273839, 0.00012575718574225903, 0.00023252313258126378, 0.00012712131137959659, 0.00022056320449337363, 0.00017132790526375175, 0.00010376176214776933, 0.00038932645111344755, 0.00012990343384444714, 0.0002488614700268954, 0.00028299333644099534, 0.00011294653086224571, 0.00020286085782572627, 0.00011414165055612102, 0.00028428609948605299, 0.00014106200251262635, 0.00017053497140295804, 0.00014285759243648499, 0.00014288377133198082, 0.00021902848675381392, 0.00026880291989073157, 0.00021704442042391747, 0.00018478608399163932, 0.00032550783362239599, 0.00023880678054410964, 0.00021840097906533629, 0.00021535910491365939, 0.00039428754826076329, 0.0003168658004142344, 0.00017090074834413826, 9.4534545496571809e-05, 0.00030624784994870424, 0.000399352255044505, 0.00026152277132496238, 0.00023590802447870374, 0.00023125168809201568, 0.00019327284826431423, 8.8646600488573313e-05, 0.00022759188141208142, 0.00024517762358300388, 0.00015861548308748752, 0.00019602378597483039, 0.00022841768804937601, 0.00056013796711340547, 0.00015728193102404475, 0.0002943573344964534, 0.00040900387102738023, 0.00019751943182200193, 0.00012685602996498346, 0.00019040005281567574, 7.841923797968775e-05, 0.00022370457008946687, 0.00016745063476264477, 0.00014909323363099247, 6.8551213189493865e-05, 0.00023308099480345845, 0.00010971059964504093, 0.00016088197298813611, 5.4450909374281764e-05, 0.0003518250014167279, 0.00011764808732550591, 0.00026572932256385684, 0.00029908644501119852, 0.00021387093875091523, 0.00015324249397963285, 0.00020596517424564809, 0.00031588913407176733, 0.0001358466106466949, 8.6190331785473973e-05, 0.00027842717827297747, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ 8,-6,-4,-32,71,-17,47,-34,-7,-45,-34,-24,-30,6,-41,83,-29,5,-15,-16,-8,59,-19,21,0,-127,-10,-62,30,36,27,30,-28,1,-99,-39,-29,-59,1,39,-58,7,71,-56,-38,50,-73,13,4,12,22,60,-49,0,12,-19,-35,14,8,-28,10,-59,-19,-55,57,-15,-43,-10,-68,36,-60,14,68,-33,-25,-1,24,-11,127,-22,-73,1,-40,-34,-45,7,-4,19,-23,-31,-24,-26,8,57,-23,0, 12,39,127,-118,-20,-15,127,-52,-21,-32,-60,15,-27,19,-120,115,-41,74,27,-81,-28,127,44,127,34,-98,19,42,101,62,127,-1,-127,-25,-127,-32,-20,-86,127,-48,-68,-84,-19,1,65,-21,-97,23,31,-1,54,127,-74,-16,-81,-14,-74,13,0,-8,-30,-106,-127,-122,-27,12,0,-107,-10,3,-36,84,-127,-64,-29,3,25,-127,-18,-127,-93,2,5,-127,58,60,-26,1,-86,-15,8,22,14,127,-98,-119, 94,17,8,-14,54,21,73,-72,-81,-44,-30,11,15,19,-41,90,-23,22,1,-56,-2,-26,6,54,17,-102,46,-91,20,57,44,26,43,2,-91,41,-15,-77,-12,127,-68,54,59,-59,-4,-73,-55,-21,-18,-17,-30,40,10,-13,20,-34,23,-23,9,-62,-14,-57,-45,-95,-30,-53,127,-14,-16,14,-20,36,3,-55,-11,69,48,37,-85,6,-22,-5,-37,-45,4,-7,9,-99,-75,-47,-84,78,3,75,-107,-6, 
  /* [0][1][][] */ -95,-8,-10,-44,5,61,-57,-38,6,-8,-15,-6,-127,33,9,92,-27,14,36,33,34,-37,105,-16,14,10,111,-24,-13,30,4,-4,-111,-20,26,-13,-18,-127,-29,8,-44,5,99,-29,-59,127,-34,-107,83,42,26,-39,-127,68,80,-13,-16,-4,20,26,-4,-1,97,-62,22,-16,-15,-30,-12,-5,-127,18,51,127,23,-102,-127,-34,-62,-28,-127,6,-16,-38,73,12,-80,68,-40,127,23,-115,127,26,-85,-6, -22,127,22,127,-127,-127,12,-65,127,127,-69,-31,-43,127,-37,7,127,-127,127,127,127,-88,127,-103,-127,14,127,127,-127,127,-27,127,-37,127,45,-64,125,82,4,32,127,18,-127,-88,127,-26,127,127,127,-127,127,-113,81,127,-90,127,-127,127,-127,127,-127,127,64,-99,127,127,-18,127,-48,-127,36,-127,0,123,127,72,-38,7,101,-93,-38,127,53,89,110,18,-127,127,-112,43,0,-23,-74,-16,-127,-45, -127,-31,27,-126,6,66,-83,-60,-77,-20,23,127,-64,27,32,127,-44,44,52,7,61,-53,91,24,9,-2,67,-89,-34,30,-5,-3,-43,-49,2,127,-5,-87,-46,-3,-41,29,51,-46,-74,-69,-22,-106,11,29,-31,-32,80,4,127,-54,117,-39,45,-17,-7,-13,-90,-127,-74,-39,-50,-63,-80,12,-102,4,16,-103,4,127,25,-2,-32,54,-55,-1,-15,-73,83,8,-37,25,8,-69,127,127,-50,31,-50,-34, 
  /* [0][2][][] */ -60,-30,18,-92,71,-26,4,28,4,3,55,2,-5,-1,24,3,-28,-28,-8,-49,5,-11,-6,27,-15,-75,29,-22,-23,-14,0,23,-59,-17,-6,22,-62,-94,44,-112,-89,-46,16,48,38,23,-94,-38,22,-9,-18,-17,28,5,3,-36,10,-4,16,-3,-35,44,-9,-86,-46,-73,66,-38,22,25,-8,-16,-49,3,-36,-60,-74,116,-3,-17,-79,3,-127,-27,18,-5,-39,-59,42,13,-68,-40,-18,-37,46,22, -73,-70,44,-30,-50,-36,35,127,-66,49,127,-41,-48,21,127,-10,-27,-25,26,-66,-20,-25,59,34,6,-45,34,-30,-33,18,-14,-22,-99,-38,-30,19,-127,38,91,-78,-56,-127,-8,127,56,-1,14,-12,42,-27,7,14,88,7,-113,-57,-115,-11,26,-33,92,58,84,-30,-98,-72,-23,-26,127,29,10,-8,-19,-24,1,-70,-18,-18,12,-13,-68,-49,-3,-100,127,-127,-55,16,14,-1,63,-5,1,-108,-14,127, -65,-16,25,-37,66,-24,-24,-43,-25,10,37,34,28,-23,5,-83,-25,16,-5,-38,-18,-27,5,20,5,17,-13,-77,-60,-12,-13,27,-45,-10,61,6,-23,1,4,-32,-13,-59,28,-11,20,21,-30,24,-20,-14,-3,-9,-50,-34,42,-58,123,-32,22,-31,-5,25,27,-95,-82,-47,-10,-21,-16,15,-92,2,-49,-35,-24,-54,-17,77,82,101,26,-43,-88,-24,11,-20,27,1,127,-10,26,37,-21,-10,12,14, 
};
const TfArray<96, float> quant17_scale = { 96, { 0.003156963037326932, 0.012100736610591412, 0.0070518124848604202, 0.0057911030016839504, 0.010107887908816338, 0.018609441816806793, 0.0046920841559767723, 0.006146745290607214, 0.0070623778738081455, 0.010065285488963127, 0.0093931350857019424, 0.0090768756344914436, 0.0063923867419362068, 0.0074815456755459309, 0.0089824404567480087, 0.0046373931691050529, 0.0075672357343137264, 0.01448536291718483, 0.007625992875546217, 0.012662777677178383, 0.0076372455805540085, 0.010233137756586075, 0.0061876294203102589, 0.0057289418764412403, 0.064486384391784668, 0.0044845039956271648, 0.0050291293300688267, 0.0053446800448000431, 0.0098822331055998802, 0.005402655340731144, 0.0093739358708262444, 0.0072814356535673141, 0.00440987478941679, 0.016546374186873436, 0.0055208955891430378, 0.010576612316071987, 0.012027216143906116, 0.0048002274706959724, 0.008621586486697197, 0.0048510199412703514, 0.012082158587872982, 0.0059951352886855602, 0.0072477362118661404, 0.0060714473947882652, 0.0060725603252649307, 0.0093087106943130493, 0.01142412330955267, 0.0092243878170847893, 0.0078534083440899849, 0.013834082521498203, 0.010149287991225719, 0.0092820413410663605, 0.0091527616605162621, 0.016757220029830933, 0.013466795906424522, 0.0072632818482816219, 0.0040177181363105774, 0.013015533797442913, 0.01697247102856636, 0.011114717461168766, 0.010026090778410435, 0.0098281968384981155, 0.0082140956073999405, 0.0037674803752452135, 0.0096726547926664352, 0.010420048609375954, 0.0067411577329039574, 0.0083310110494494438, 0.0097077516838908195, 0.023805862292647362, 0.0066844816319644451, 0.012510186992585659, 0.017382664605975151, 0.0083945756778120995, 0.0053913812153041363, 0.0080920020118355751, 0.0033328174613416195, 0.009507443755865097, 0.0071166516281664371, 0.0063364622183144093, 0.0029134266078472137, 0.0099059417843818665, 0.0046627004630863667, 0.0068374834954738617, 0.0023141636047512293, 0.014952562749385834, 0.005000043660402298, 0.011293496005237103, 0.012711173854768276, 0.0090895146131515503, 0.0065128058195114136, 0.0087535195052623749, 0.013425287790596485, 0.0057734809815883636, 0.0036630891263484955, 0.01183315459638834, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 2019, 6906, 1559, 2013, 9506, 17843, -39, 2548, 7321, -938, 16270, 2292, 4038, 1303, 4896, 437, 2899, 8066, 477, 8999, 2210, 14738, -2444, 1324, -7227, 4504, 2463, 3949, 8510, 2708, 2549, 7433, 6264, 12397, 3496, 6873, 8034, 2551, 7445, 2193, 21643, 762, 3514, 598, 6492, 8708, 16704, 6661, 2684, -540, 4859, 3734, 4563, -3469, 10502, 1528, 2666, 7406, 1295, 1545, 4899, 12472, 8102, 22, 29763, 13884, 1795, 6021, 7915, 7024, 2337, 958, -4989, 6418, 1305, 4315, 131, 12993, 3999, 6359, 5743, 691, 5707, 7528, 832, 15559, 5277, 1972, -4220, 3712, 836, 23044, 4327, 4063, 5029, 7718, };
const TfArray<96, float> quant18_scale = { 96, { 0.00015183549840003252, 9.2492802650667727e-05, 0.00015618927136529237, 0.00017917162040248513, 7.0184440119192004e-05, 5.0324291805736721e-05, 0.00015259136853273958, 0.00018001355056185275, 9.4691196864005178e-05, 0.00012755005445796996, 5.4622105380985886e-05, 0.00011356313189025968, 0.00012031389633193612, 0.000233336744713597, 0.00011647120845736936, 0.00013499398482963443, 0.00016549970314372331, 7.8922654211055487e-05, 0.00020496538490988314, 9.1244844952598214e-05, 0.00012704804248642176, 6.4835585362743586e-05, 0.00011207801435375586, 0.00015148878446780145, 9.7077354439534247e-05, 9.6593787020538002e-05, 0.00017818198830354959, 0.0001186570298159495, 9.915522241499275e-05, 0.00011630762310232967, 0.00022361724404618144, 9.5761664852034301e-05, 0.00010314165410818532, 6.2326638726517558e-05, 0.00012060805602231994, 0.00010220577678410336, 9.0047426056116819e-05, 0.00012855324894189835, 8.1352969573345035e-05, 0.00011226087372051552, 4.0453473047818989e-05, 0.0002407071297056973, 0.00011667049693642184, 0.00011520562838995829, 7.7219592640176415e-05, 7.427646778523922e-05, 5.3508756536757573e-05, 0.00010879708861466497, 0.00013299554120749235, 0.0001816523727029562, 0.00010583672701613978, 0.00013305502943694592, 0.00011591625661822036, 0.0001273428788408637, 8.4602463175542653e-05, 0.0001246882020495832, 9.8465556220617145e-05, 0.00010598007793305442, 0.00013413422857411206, 0.00015127751976251602, 9.5684452389832586e-05, 6.4424886659253389e-05, 8.8836422946769744e-05, 0.0001773029362084344, 3.4708580642472953e-05, 7.0611655246466398e-05, 0.00017542349814902991, 0.00011214125697733834, 9.3698028649669141e-05, 8.092491771094501e-05, 0.00016575792687945068, 0.00015557381266262382, 0.00012874849198851734, 0.00010012911661760882, 0.0001525127881905064, 0.00016115937614813447, 0.00018850724154617637, 6.9365312810987234e-05, 0.00011870375601574779, 0.00012375792721286416, 7.4066461820621043e-05, 0.00015065754996612668, 9.9141754617448896e-05, 0.00011236160207772627, 0.00015787746815476567, 6.289403245318681e-05, 0.00011590525537030771, 0.00018323972471989691, 0.00011160911526530981, 0.00017707704682834446, 0.00019182061078026891, 4.0816994442138821e-05, 0.00011272330448264256, 8.381147199543193e-05, 0.00010970450239256024, 8.6799052951391786e-05, } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 17,-29,31,88,-127,-11,81,59,29,20,-61,17,24,0,8,93, 
  /* [1][0][][] */ -3,14,-32,28,127,88,39,-58,-9,28,-121,5,-15,95,-42,-69, 
  /* [2][0][][] */ -43,63,74,22,51,100,-7,18,16,-36,24,-26,57,-127,21,37, 
  /* [3][0][][] */ 127,-41,-51,-47,32,-30,-13,1,95,-5,-73,43,-70,79,-66,41, 
  /* [4][0][][] */ -91,-17,40,69,-84,11,-66,-117,-33,3,-126,-127,-21,74,-4,127, 
  /* [5][0][][] */ -127,-12,83,-20,59,52,-13,-26,-51,-21,-70,-37,-85,35,-105,-31, 
  /* [6][0][][] */ -112,12,-70,19,-46,-127,108,-20,24,-47,-99,41,41,10,-80,-22, 
  /* [7][0][][] */ 2,107,69,-22,127,19,69,-28,36,31,-22,12,81,-16,36,48, 
  /* [8][0][][] */ 3,-38,-122,7,19,64,-61,-63,74,-8,-1,70,99,35,-127,-52, 
  /* [9][0][][] */ -35,-127,-18,91,-14,-49,-36,25,60,58,4,46,-81,-11,9,-35, 
  /* [10][0][][] */ -41,-7,-55,65,-127,44,74,-13,35,-119,68,-26,-5,106,-60,29, 
  /* [11][0][][] */ 14,-85,-59,71,17,31,110,16,-58,-54,21,-49,50,127,-31,103, 
  /* [12][0][][] */ -70,-127,-24,52,-44,-64,-25,38,71,79,21,35,-9,-33,-7,11, 
  /* [13][0][][] */ -61,-42,-25,10,17,-5,22,33,-9,127,-21,-11,27,38,10,-13, 
  /* [14][0][][] */ -78,-36,-26,15,51,44,-56,-70,127,-31,22,-90,51,-58,-33,-29, 
  /* [15][0][][] */ 0,-127,93,-51,-68,-10,46,20,-12,-77,-119,-60,103,-27,-30,-33, 
  /* [16][0][][] */ -39,-31,-13,-51,80,41,-49,8,50,-127,23,-12,-62,-25,-93,-68, 
  /* [17][0][][] */ 27,16,8,-38,34,-79,-106,10,127,-16,24,103,64,17,53,-92, 
  /* [18][0][][] */ 48,-5,-83,-127,-1,-9,75,4,6,36,-15,62,3,59,0,-49, 
  /* [19][0][][] */ -64,-13,-10,-62,-25,64,-41,-62,46,1,-3,-127,-42,27,-37,1, 
  /* [20][0][][] */ 48,98,35,-127,40,-33,-99,119,-65,-82,73,-76,-83,84,-62,-69, 
  /* [21][0][][] */ 5,-127,-102,32,92,39,10,38,18,-13,-7,11,33,-88,-68,-30, 
  /* [22][0][][] */ 82,-47,114,25,17,40,45,56,98,127,18,37,7,-12,77,-60, 
  /* [23][0][][] */ -127,-75,43,86,28,20,-19,-6,-26,1,28,-41,-37,75,92,97, 
  /* [24][0][][] */ 10,-30,17,23,14,-94,5,-47,31,127,-51,58,-20,-38,42,-54, 
  /* [25][0][][] */ 52,10,103,78,8,16,-31,-32,-122,59,54,-69,-57,-21,127,39, 
  /* [26][0][][] */ -22,39,-12,22,-61,127,-35,38,-63,-31,-73,26,-10,-1,45,-112, 
  /* [27][0][][] */ 50,2,-23,-58,-76,0,-62,3,-97,-45,-86,-32,-52,49,-2,127, 
  /* [28][0][][] */ -127,-48,26,53,22,-16,-114,7,23,-44,-9,-37,12,-22,-40,-35, 
  /* [29][0][][] */ -27,-123,-19,103,-13,-3,127,-1,122,57,-95,32,9,10,-47,51, 
  /* [30][0][][] */ 23,-27,-33,25,-127,-23,31,-39,7,23,9,-16,23,50,-42,22, 
  /* [31][0][][] */ -127,41,54,103,-42,19,-63,-15,-66,-33,30,-10,-7,-76,-26,102, 
  /* [32][0][][] */ -127,-79,-111,-70,-66,-38,-16,-4,123,78,-32,-42,-20,25,23,4, 
  /* [33][0][][] */ -44,-7,-49,85,-74,-81,70,-42,-86,-8,-99,-90,-47,127,119,107, 
  /* [34][0][][] */ 26,127,49,53,-23,-70,-27,20,-14,-49,-41,19,-84,3,125,103, 
  /* [35][0][][] */ 24,-1,-127,-29,-124,19,97,16,29,9,15,-23,-26,77,7,75, 
  /* [36][0][][] */ -27,43,-54,92,127,-18,60,57,-63,-16,-82,-102,-72,-27,7,60, 
  /* [37][0][][] */ -78,-23,-5,-22,33,-110,-65,-11,25,-6,56,56,39,-55,-3,-127, 
  /* [38][0][][] */ 31,27,89,27,-75,24,-127,-74,-108,-105,100,60,16,-105,89,55, 
  /* [39][0][][] */ 37,18,82,127,-105,39,37,80,3,4,57,41,106,58,21,102, 
  /* [40][0][][] */ 105,88,22,127,4,-41,-75,65,-45,73,52,26,-42,-57,111,12, 
  /* [41][0][][] */ -45,-45,-9,21,-44,127,-14,6,-7,53,-89,-12,-7,23,1,-119, 
  /* [42][0][][] */ 9,-117,-14,6,78,3,61,48,-44,-127,-74,-44,-17,-59,20,40, 
  /* [43][0][][] */ -2,-30,-38,41,81,-4,34,0,-76,-70,-117,-68,127,-68,28,108, 
  /* [44][0][][] */ -11,-24,-46,-67,30,67,70,-6,-13,-127,-66,67,9,95,18,81, 
  /* [45][0][][] */ -38,-52,-88,43,-127,120,-23,44,86,-90,59,-10,93,26,-96,89, 
  /* [46][0][][] */ -19,-80,-72,29,44,-127,-39,46,-23,-24,16,37,-106,-96,84,-103, 
  /* [47][0][][] */ -66,-109,-23,127,-41,44,63,102,-25,92,50,9,-6,75,55,125, 
  /* [48][0][][] */ 14,-40,-84,-84,39,-56,11,16,36,-80,-32,-11,-95,-5,-31,-127, 
  /* [49][0][][] */ 54,9,32,30,14,-31,-1,41,-33,127,-28,57,-21,-30,75,46, 
  /* [50][0][][] */ 6,6,63,-1,-127,-59,-40,-53,77,76,34,57,-37,-82,25,-33, 
  /* [51][0][][] */ 13,40,36,-117,-29,73,8,-77,-21,42,59,-30,127,51,11,67, 
  /* [52][0][][] */ 55,-57,75,-99,89,-119,37,12,46,-8,127,-84,90,9,-11,100, 
  /* [53][0][][] */ -10,-35,8,-6,-59,-127,-30,-92,13,69,-62,104,-26,-40,36,-65, 
  /* [54][0][][] */ 80,30,25,26,-57,-31,-95,-127,-16,-12,53,36,-51,-22,33,18, 
  /* [55][0][][] */ 9,8,-59,127,-67,44,89,-39,-42,111,-9,50,35,-17,-38,97, 
  /* [56][0][][] */ 21,-127,-91,79,-89,111,100,44,61,-75,2,46,25,48,25,115, 
  /* [57][0][][] */ 6,33,127,1,51,-24,-6,-26,25,-19,-45,76,-7,-8,82,-33, 
  /* [58][0][][] */ 70,-28,47,-27,60,-10,3,87,86,60,-13,51,64,39,127,-35, 
  /* [59][0][][] */ -6,67,-58,-51,18,-114,-19,-3,34,23,-59,-44,-127,-8,63,8, 
  /* [60][0][][] */ 70,-24,-8,-19,45,-61,-9,-39,88,127,-22,100,3,27,69,-61, 
  /* [61][0][][] */ 47,70,19,-35,-86,-106,-20,-3,-127,-26,-22,33,-44,-29,106,91, 
  /* [62][0][][] */ -10,87,-23,17,-51,127,-28,16,-102,-17,-50,17,9,-3,74,-10, 
  /* [63][0][][] */ 28,-1,-127,-108,14,-43,48,22,52,-67,-56,-21,-94,27,26,-89, 
  /* [64][0][][] */ -59,5,51,-25,62,19,41,42,-127,-17,-86,-71,-45,47,51,85, 
  /* [65][0][][] */ -60,3,-71,-1,-29,-7,-46,-21,-77,-46,-10,-15,-127,24,-38,45, 
  /* [66][0][][] */ 25,64,-10,29,-8,127,-58,54,-66,54,-34,71,-74,44,84,-123, 
  /* [67][0][][] */ 39,-34,-99,-14,-7,-100,66,41,15,-23,16,127,-32,-1,-20,-87, 
  /* [68][0][][] */ 4,-127,-50,66,17,-6,-5,41,54,42,33,22,-43,24,-17,-38, 
  /* [69][0][][] */ 41,46,35,-60,17,-20,-32,69,77,42,81,34,62,-55,27,-127, 
  /* [70][0][][] */ 50,52,71,-59,69,50,-52,-88,-127,-111,3,68,12,79,-115,-3, 
  /* [71][0][][] */ -68,-127,38,4,60,-51,18,93,3,83,-79,-42,7,53,-63,25, 
  /* [72][0][][] */ -10,-11,50,-11,-37,57,-61,-112,-29,23,-46,28,-15,117,-127,37, 
  /* [73][0][][] */ 15,-60,-26,6,24,-110,1,-8,93,85,127,-4,28,-34,-54,88, 
  /* [74][0][][] */ 5,-6,-45,60,-104,2,110,59,50,31,34,93,127,2,-27,33, 
  /* [75][0][][] */ -42,30,-27,54,-63,127,-37,35,-20,24,-38,72,-32,39,-2,-91, 
  /* [76][0][][] */ -66,91,-56,85,-98,5,-26,78,77,24,2,-31,56,-15,-127,56, 
  /* [77][0][][] */ 75,86,-84,127,23,87,101,0,60,-47,67,-34,36,73,6,24, 
  /* [78][0][][] */ 5,-72,-31,-52,96,-93,5,-43,45,71,127,-33,-36,-4,-58,111, 
  /* [79][0][][] */ -33,48,-13,60,-11,-21,-23,-23,-111,-8,61,12,91,19,-127,-50, 
  /* [80][0][][] */ -121,-45,83,68,40,70,57,-67,-127,-15,-61,-95,30,-21,10,109, 
  /* [81][0][][] */ 78,83,-55,-8,15,-44,65,120,-82,102,-83,-4,-68,45,127,86, 
  /* [82][0][][] */ 30,121,-70,-36,-78,-127,94,-69,9,-37,-42,62,73,-23,93,-7, 
  /* [83][0][][] */ 19,7,-10,-7,-10,-2,4,-54,53,-23,38,23,33,-19,-56,-127, 
  /* [84][0][][] */ -127,-48,-10,-17,17,91,96,0,37,47,60,93,34,116,2,66, 
  /* [85][0][][] */ 67,56,38,-108,94,52,25,55,13,127,-2,17,-16,72,53,21, 
  /* [86][0][][] */ -30,77,-36,-3,45,27,8,24,108,58,127,27,-25,43,-47,-63, 
  /* [87][0][][] */ 9,-41,11,-60,25,-127,9,-21,49,9,71,-17,17,-35,-53,45, 
  /* [88][0][][] */ -43,39,-9,63,102,-63,54,-7,-51,-68,63,-66,86,123,28,-127, 
  /* [89][0][][] */ -15,60,-16,12,-12,127,-11,19,-36,10,-38,33,6,56,22,-69, 
  /* [90][0][][] */ 63,-63,30,-9,127,0,65,4,-2,-71,-58,2,0,10,-51,37, 
  /* [91][0][][] */ 25,23,12,1,8,-114,-127,35,13,59,-19,-62,-89,-45,55,-46, 
  /* [92][0][][] */ 81,81,106,5,-110,-77,-41,-34,-67,68,-127,-52,-76,-93,64,19, 
  /* [93][0][][] */ 61,-127,-116,12,-85,-103,-69,85,115,103,37,125,1,40,-48,-54, 
  /* [94][0][][] */ 57,1,107,-39,9,-25,-10,41,11,74,-14,36,-7,0,127,25, 
  /* [95][0][][] */ -77,-57,-26,-12,127,48,14,77,-60,-23,-65,-55,48,9,-100,51, 
};
const TfArray<96, float> quant19_scale = { 96, { 0.0032590373884886503, 0.0019852900877594948, 0.0033524881582707167, 0.0038457871414721012, 0.0015064574545249343, 0.0010801739990711212, 0.0032752617262303829, 0.0038638587575405836, 0.0020324769429862499, 0.0027377682272344828, 0.0011724233627319336, 0.00243754917755723, 0.0025824494659900665, 0.0050084018148481846, 0.0024999689776450396, 0.0028975466266274452, 0.0035523297265172005, 0.001694016857072711, 0.0043994314037263393, 0.001958503620699048, 0.0027269930578768253, 0.0013916481984779239, 0.0024056723341345787, 0.0032515954226255417, 0.0020836940966546535, 0.0020733147393912077, 0.0038245455361902714, 0.0025468859821557999, 0.0021282939705997705, 0.0024964576587080956, 0.0047997799701988697, 0.002055453835055232, 0.0022138599306344986, 0.0013377955183386803, 0.0025887633673846722, 0.0021937720011919737, 0.0019328019116073847, 0.0027593011036515236, 0.0017461817478761077, 0.002409597160294652, 0.00086830410873517394, 0.0051666018553078175, 0.0025042465422302485, 0.0024728041607886553, 0.0016574618639424443, 0.0015942899044603109, 0.0011485262075439095, 0.0023352496791630983, 0.0028546517714858055, 0.0038990348111838102, 0.0022717076353728771, 0.0028559286147356033, 0.0024880573619157076, 0.0027333213947713375, 0.001815929776057601, 0.002676340751349926, 0.0021134908311069012, 0.002274784492328763, 0.0028790927026420832, 0.0032470608130097389, 0.0020537965465337038, 0.0013828328810632229, 0.0019068085821345448, 0.0038056774064898491, 0.00074499420588836074, 0.0015156273730099201, 0.0037653364706784487, 0.0024070297367870808, 0.0020111594349145889, 0.0017369940178468823, 0.0035578722599893808, 0.0033392778132110834, 0.0027634918224066496, 0.0021491979714483023, 0.0032735748682171106, 0.0034591676667332649, 0.004046169575303793, 0.001488875481300056, 0.0025478890165686607, 0.0026563729625195265, 0.0015897821867838502, 0.0032337538432329893, 0.0021280050277709961, 0.0024117592256516218, 0.0033887238241732121, 0.0013499741908162832, 0.0024878212716430426, 0.0039331060834228992, 0.0023956077639013529, 0.0038008287083357573, 0.004117288626730442, 0.00087610684568062425, 0.0024195229634642601, 0.0017989517655223608, 0.0023547266609966755, 0.0018630778649821877, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { 2187, 10831, -21073, -2353, 16902, -20277, -27533, -15557, -1310, 1534, -19603, -13237, 1005, -16443, 1070, -6907, };
const TfArray<16, float> quant20_scale = { 16, { 0.00010232267959509045, 0.00011656307469820604, 0.00014443205145653337, 0.00018744940462056547, 8.2552738604135811e-05, 0.0001289285282837227, 8.633230027044192e-05, 0.00013546351692639291, 8.1189085904043168e-05, 6.8178727815393358e-05, 0.00016809519729577005, 0.00011285429354757071, 0.00010991773888235912, 0.00010039251355919987, 0.00011967750469921157, 7.9775993071962148e-05, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 25,65,30,-34,72,59,-56,67,-41,112,-8,46,-41,43,-14,43,21,66,63,-49,-80,77,-2,36,47,30,48,45,-58,-53,-29,71,-25,11,-94,64,53,-127,-36,2,1,-13,57,-14,-17,-63,-74,-26, 
  /* [1][0][][] */ -55,-1,-92,-63,5,109,-56,9,-33,-17,-54,38,66,-4,-23,-30,-23,-32,10,43,-81,51,-107,-55,-46,-32,54,57,-33,-41,30,-54,12,-24,-38,57,30,-51,127,-33,-16,32,-50,-18,46,39,44,13, 
  /* [2][0][][] */ -16,9,38,-47,-8,-69,-4,37,109,64,-63,9,116,-67,127,60,-75,-18,-23,34,81,-67,-41,-72,18,-32,29,-46,51,56,-30,1,33,-36,64,44,-59,12,-15,-13,26,8,68,-40,11,-73,102,-44, 
  /* [3][0][][] */ 51,25,-13,-34,37,107,7,-12,55,-48,16,-4,-26,8,13,28,-34,-62,33,-121,-4,1,-22,-9,-25,85,127,62,-36,-35,17,44,53,-58,89,34,-19,-47,2,46,20,6,-26,27,49,26,-10,-25, 
  /* [4][0][][] */ 94,-25,43,-50,80,47,53,5,72,-31,-98,26,6,-11,2,-25,-108,-116,-63,-105,-44,38,-31,-16,-94,123,-127,125,-61,-52,29,42,33,-56,13,-30,-41,15,-28,20,-49,-6,-14,77,-54,106,-30,-25, 
  /* [5][0][][] */ -2,-8,-55,21,-18,51,30,-19,75,71,38,114,78,-51,33,-8,-22,127,-14,40,22,2,-93,-19,40,3,-71,-20,-15,49,42,-18,-43,2,52,8,-30,-4,-76,21,85,-30,21,25,5,8,-25,33, 
  /* [6][0][][] */ 43,19,26,79,-5,-34,94,-26,-29,41,111,74,7,37,-51,56,11,-27,-76,40,48,-69,-27,52,-79,69,73,-18,80,29,-31,0,61,-72,-80,-14,54,20,19,-16,16,72,66,14,56,127,16,-19, 
  /* [7][0][][] */ -86,-17,-25,26,-82,-28,28,40,84,125,-51,-56,-78,0,-20,-12,-69,91,-6,127,-50,56,16,35,-9,-73,-27,-79,14,35,-24,-2,-12,13,0,-1,13,-67,125,17,35,37,52,-13,36,58,-4,11, 
  /* [8][0][][] */ -11,-98,69,-43,37,-75,60,-35,-10,-106,26,-9,-47,23,32,26,-15,4,-43,72,4,17,4,16,35,-18,-55,-56,-85,-45,-47,-85,5,-44,-1,87,-57,28,93,-23,-3,4,46,127,-7,-43,-39,44, 
  /* [9][0][][] */ -1,-39,30,-69,25,55,-42,43,48,-28,-47,-47,-7,-32,127,-22,-1,-98,18,52,-77,46,73,-20,-14,-64,-36,68,49,64,-28,-24,-46,37,2,109,-49,-35,-70,-18,-24,-10,44,83,45,58,-41,17, 
  /* [10][0][][] */ 1,0,-17,-5,24,37,-62,-39,85,32,54,-22,-51,2,68,-23,-62,127,3,59,-8,4,26,22,-26,49,9,88,53,0,-40,-2,92,41,-14,47,5,-58,-58,47,-73,-13,31,-24,35,25,26,52, 
  /* [11][0][][] */ -33,52,-25,59,1,59,11,-5,5,15,-127,-68,65,31,-17,-28,34,30,-17,-47,-16,5,117,-4,55,4,0,7,-8,23,-5,57,47,-5,-52,-6,27,77,92,26,45,-38,64,-2,-61,-32,80,6, 
  /* [12][0][][] */ -83,13,29,9,-44,-62,4,21,-52,-34,-124,17,91,-88,17,47,33,104,125,-127,-30,41,-50,-104,3,-13,52,-33,3,16,-14,58,75,76,49,-14,-33,-33,41,18,-43,-2,68,-10,56,-11,-23,-43, 
  /* [13][0][][] */ -41,-112,-32,-70,35,48,77,-18,-109,28,101,-39,57,29,127,28,113,7,-40,-103,89,-58,106,-10,-53,11,-14,9,-74,-106,-122,8,60,-26,-74,55,83,-63,104,-72,8,76,76,71,55,-15,95,-49, 
  /* [14][0][][] */ 56,40,-77,-9,-40,46,-98,-16,-46,68,35,49,-5,-57,6,-47,29,-127,13,20,87,-64,9,1,-16,98,-71,14,-79,-20,-93,16,103,32,78,-38,-43,-5,-19,43,-11,-13,68,-44,-48,-44,-52,32, 
  /* [15][0][][] */ -61,30,27,15,107,11,-9,47,18,94,-18,72,68,-29,-33,10,-5,41,-3,-46,33,-66,-79,-60,46,-46,-34,82,-48,27,6,5,-86,-13,127,-3,-51,10,73,-8,-43,-23,24,-26,-12,-28,15,3, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0043487139046192169, 0.0049539306201040745, 0.0061383619904518127, 0.0079665994271636009, 0.0035084912087768316, 0.0054794624447822571, 0.0036691226996481419, 0.0057571991346776485, 0.0034505361691117287, 0.0028975959867238998, 0.0071440455503761768, 0.0047963075339794159, 0.0046715037897229195, 0.0042666816152632236, 0.0050862939096987247, 0.0033904796000570059, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 7759, 543, 19547, -96, 7567, -2372, 37736, 610, 11057, 35145, 6264, 19620, -5225, 10128, 36068, 23548, 2342, 606, 4358, 46627, 1156, 16350, 143, 14883, 12048, 45870, -2098, -2700, -8176, 7860, 16974, 4, -35, 6270, 3944, 8296, 3231, 25030, 2929, 19175, 23705, 1619, 935, 12541, 4735, 2838, 31608, 20582, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00012076061102561653, 0.00021711576846428216, 6.2969826103653759e-05, 8.4936305938754231e-05, 0.00012353937199804932, 9.1548579803202301e-05, 6.2597770011052489e-05, 0.00049856107216328382, 9.9289703939575702e-05, 7.1725466114003211e-05, 6.1015209212200716e-05, 0.00011731504491763189, 6.9503097620327026e-05, 0.00011371969594620168, 4.9541526095708832e-05, 6.3708444940857589e-05, 7.3525938205420971e-05, 6.3884232076816261e-05, 0.00012900822912342846, 4.531991362455301e-05, 8.0373472883366048e-05, 6.2015693401917815e-05, 0.00013025323278270662, 8.6832769738975912e-05, 9.7995754913426936e-05, 4.5564604079117998e-05, 8.8089349446818233e-05, 6.0896374634467065e-05, 0.00022532058937940747, 0.00018135842401534319, 0.00010392063268227503, 0.00036277208710089326, 0.00011718322639353573, 0.00013881997438147664, 0.00011963093857048079, 0.00010203190322499722, 0.00015940103912726045, 7.6983895269222558e-05, 9.1518908448051661e-05, 9.9771110399160534e-05, 5.4622156312689185e-05, 0.0001600032119313255, 0.00020580299315042794, 9.2144400696270168e-05, 0.00015052898379508406, 5.0330290832789615e-05, 6.8165369157213718e-05, 4.7272114898078144e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -35,84,-127,75,-127,53,-127,49,-49,-64,46,-46,92,-76,-9,-81,127,40,127,-96,107,-41,53,-127,-69,-61,53,97,-53,-72,-72,70,44,-110,70,-94,9,-127,95,-55,-73,-93,51,-127,78,80,-92,-127, -55,45,-48,106,-127,127,-62,85,-127,-127,112,-91,107,-122,-15,-92,66,123,108,-127,127,-55,75,-76,-127,-125,22,127,29,-119,-88,91,127,-127,127,-127,28,-112,78,-85,-127,63,79,-37,-61,85,-74,-85, 15,44,67,56,-65,20,-71,69,-72,-48,77,18,114,-100,-8,-47,43,66,88,-83,61,-70,39,-87,-62,-55,19,63,127,-29,-127,63,51,-111,32,-29,23,-54,14,-73,-112,-14,53,-99,-66,55,-46,-78, 
  /* [0][1][][] */ -96,44,-46,76,-12,93,-81,-4,-113,-60,44,-59,96,-123,-83,-127,103,123,-40,-54,33,-127,91,-100,-41,-127,83,64,-112,-95,-74,14,102,25,70,-93,-127,-110,102,-81,-107,-84,69,-123,127,74,-113,-41, -61,127,-126,127,-90,78,-69,39,-117,-111,127,-127,47,-127,-127,-87,77,127,-63,-111,69,-52,127,-74,-127,-117,127,94,59,-107,-62,127,86,25,126,-60,-123,-45,127,-127,-121,127,127,-21,-59,127,-10,-106, -10,65,-78,65,-44,35,-4,106,-57,-53,45,-12,118,-80,-98,-6,36,108,-86,-76,5,-65,74,-37,-73,-125,59,29,122,-74,-53,92,-15,-12,71,50,-14,24,79,-53,8,-34,7,-7,-101,60,15,-58, 
  /* [0][2][][] */ -37,47,-45,-15,14,28,-78,-29,-90,-45,-11,-48,19,-82,-21,-87,75,45,-87,-51,29,-91,8,-34,9,-6,20,-12,-90,-127,-15,-127,37,40,54,-24,7,-56,14,-66,-106,-51,76,-73,39,73,-127,-46, -127,120,-89,20,-4,6,-51,127,-40,-63,35,-81,102,-63,-26,-23,64,16,-86,-59,22,-36,34,-111,-5,-69,48,28,31,-124,-18,3,111,30,94,-4,-20,-15,13,-30,-8,47,98,-80,-34,38,-37,-71, -18,60,-42,-1,102,-17,-19,22,17,-11,-3,-40,127,-58,-52,29,-14,24,-68,19,0,-53,19,-77,-20,22,54,-8,87,-17,2,-29,22,3,8,15,22,10,19,-15,59,-24,1,10,-59,47,19,-24, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0051323259249329567, 0.0092274202033877373, 0.0026762175839394331, 0.0036097930278629065, 0.0052504232153296471, 0.0038908144924789667, 0.0026604051236063242, 0.021188845857977867, 0.0042198123410344124, 0.0030483321752399206, 0.0025931464042514563, 0.0049858894199132919, 0.0029538816306740046, 0.0048330868594348431, 0.0021055147517472506, 0.0027076087426394224, 0.0031248524319380522, 0.0027150798123329878, 0.0054828496649861336, 0.0019260962726548314, 0.0034158725757151842, 0.0026356668677181005, 0.0055357622914016247, 0.0036903927102684975, 0.0041648196056485176, 0.0019364956533536315, 0.0037437973078340292, 0.0025880958419293165, 0.0095761250704526901, 0.007707732729613781, 0.0044166268780827522, 0.015417813323438168, 0.0049802870489656925, 0.0058998488821089268, 0.0050843148492276669, 0.0043363557197153568, 0.0067745442502200603, 0.003271815599873662, 0.0038895534817129374, 0.0042402721010148525, 0.0023214416578412056, 0.0068001365289092064, 0.0087466267868876457, 0.0039161369204521179, 0.0063974815420806408, 0.0021390372421592474, 0.0028970281127840281, 0.0020090648904442787, } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 2588, -3814, 330, -1562, 2593, -240, 6012, -6316, 969, 1400, 2307, 3354, 12, -733, 152, 2841, -2315, 2674, 4489, 502, -689, 1669, -815, 2616, 3162, 2540, 605, -1056, 9026, -2226, 3201, -1876, -494, 3702, -1707, 1935, 1300, 1563, 1003, 5089, 1489, 6555, -2009, 969, 5362, 62, 3244, 1124, };
const TfArray<48, float> quant24_scale = { 48, { 0.00016770196089055389, 0.0001528866559965536, 0.00028604807448573411, 0.00023605908791068941, 0.00026777150924317539, 0.00028024156927131116, 0.00014642876340076327, 0.00011349557462381199, 0.00024804487475194037, 0.00020883619436062872, 0.00021599599858745933, 0.0001779495069058612, 0.00050519529031589627, 0.00028521829517558217, 0.00027665734523907304, 0.00026744871865957975, 0.00018764818378258497, 0.0002646732609719038, 0.00018502850434742868, 0.00027885314193554223, 0.00033181055914610624, 0.00024797243531793356, 0.00017786488751880825, 0.00025665119756013155, 0.00019198576046619564, 0.00019066700770054013, 0.00032304174965247512, 0.00027609197422862053, 0.0001030984494718723, 0.00014769926201552153, 0.00018718576757237315, 0.00016855062858667225, 0.00023758091265335679, 0.00022024207282811403, 0.0002423514670226723, 0.00023361027706414461, 0.00030695312307216227, 0.00021442769502755255, 0.00017496228974778205, 0.00016563663666602224, 0.00031096095335669816, 0.00012446337495930493, 0.00019931010319851339, 0.0002840983506757766, 0.00015542616893071681, 0.00040869938675314188, 0.0001936136104632169, 0.00029980915132910013, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 96,44,97,-84,96,127,-81,-55, 
  /* [1][0][][] */ 23,-122,-127,-22,100,33,6,23, 
  /* [2][0][][] */ -127,-24,-50,-30,88,9,-92,-73, 
  /* [3][0][][] */ 35,44,109,-116,9,-127,-12,-19, 
  /* [4][0][][] */ -127,36,-45,-15,44,-1,-58,-47, 
  /* [5][0][][] */ -96,7,-69,-15,-2,32,-73,-127, 
  /* [6][0][][] */ -31,-127,-111,33,71,10,-3,40, 
  /* [7][0][][] */ -49,-127,-117,-39,-63,-62,42,61, 
  /* [8][0][][] */ 91,47,-10,11,68,-70,-127,37, 
  /* [9][0][][] */ -38,45,-46,81,-67,-27,127,-20, 
  /* [10][0][][] */ -23,127,44,35,87,-14,-22,57, 
  /* [11][0][][] */ -82,-49,-22,10,-71,127,119,-12, 
  /* [12][0][][] */ 69,32,-127,26,3,-32,-50,-7, 
  /* [13][0][][] */ 89,-49,-66,9,14,-127,-40,-33, 
  /* [14][0][][] */ -27,-50,59,22,127,-83,-80,36, 
  /* [15][0][][] */ -61,-41,-24,127,67,56,-78,4, 
  /* [16][0][][] */ 102,-6,-32,11,112,-108,-127,-33, 
  /* [17][0][][] */ 76,127,30,55,49,50,20,-81, 
  /* [18][0][][] */ 23,3,-17,-2,127,0,11,-15, 
  /* [19][0][][] */ 17,120,29,14,-127,3,17,-19, 
  /* [20][0][][] */ -60,22,57,-127,-15,55,-3,121, 
  /* [21][0][][] */ -38,66,47,-123,67,27,6,127, 
  /* [22][0][][] */ -49,-88,-84,7,-114,127,109,-41, 
  /* [23][0][][] */ 86,-3,-127,25,44,11,-64,-18, 
  /* [24][0][][] */ -48,46,5,21,-36,109,-106,127, 
  /* [25][0][][] */ -82,-52,-127,17,-39,-48,64,87, 
  /* [26][0][][] */ 38,-16,-46,-31,107,0,127,-34, 
  /* [27][0][][] */ 127,-98,41,117,10,20,-9,112, 
  /* [28][0][][] */ 101,33,30,-31,100,-127,19,-62, 
  /* [29][0][][] */ -22,-15,-96,-66,-92,8,127,-56, 
  /* [30][0][][] */ 33,-127,-68,-56,-91,11,28,-25, 
  /* [31][0][][] */ 0,32,-18,-1,-127,-3,-20,-14, 
  /* [32][0][][] */ 13,-46,-44,64,-3,-85,114,-127, 
  /* [33][0][][] */ 11,127,27,-24,30,-43,-11,-48, 
  /* [34][0][][] */ -127,-33,124,6,-23,116,89,18, 
  /* [35][0][][] */ -17,71,127,0,-61,-68,-41,37, 
  /* [36][0][][] */ -51,-23,84,-22,-2,127,98,-1, 
  /* [37][0][][] */ -14,-126,-38,-127,-36,-109,98,31, 
  /* [38][0][][] */ 22,-3,61,-53,66,58,-127,9, 
  /* [39][0][][] */ -24,91,-127,-35,-30,-27,-3,88, 
  /* [40][0][][] */ 98,-95,8,43,11,6,1,127, 
  /* [41][0][][] */ -54,60,127,-2,50,52,-80,54, 
  /* [42][0][][] */ 61,-106,-78,-26,-103,-20,-16,-127, 
  /* [43][0][][] */ -4,-87,19,-58,127,-64,-11,19, 
  /* [44][0][][] */ -34,127,101,9,29,25,-10,16, 
  /* [45][0][][] */ -30,36,26,70,-86,40,-127,6, 
  /* [46][0][][] */ -32,-57,19,52,-127,-115,-10,21, 
  /* [47][0][][] */ -14,59,21,-70,-127,26,-13,57, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0017974624643102288, 0.0016386691713705659, 0.0030659192707389593, 0.0025301275309175253, 0.0028700274415314198, 0.0030036838725209236, 0.0015694522298872471, 0.0012164678191766143, 0.0026585934683680534, 0.0022383471950888634, 0.0023150874767452478, 0.0019072976429015398, 0.0054147820919752121, 0.0030570256058126688, 0.0029652675148099661, 0.0028665675781667233, 0.0020112500060349703, 0.0028368199709802866, 0.0019831717945635319, 0.0029888025019317865, 0.0035564105492085218, 0.0026578172110021114, 0.001906390767544508, 0.0027508379425853491, 0.002057740930467844, 0.0020436062477529049, 0.0034624247346073389, 0.0029592078644782305, 0.0011050293687731028, 0.0015830696793273091, 0.0020062937401235104, 0.0018065585754811764, 0.0025464387144893408, 0.0023605977185070515, 0.0025975704193115234, 0.0025038807652890682, 0.0032899836078286171, 0.0022982780355960131, 0.0018752800533547997, 0.0017753258580341935, 0.0033329403959214687, 0.0013340228470042348, 0.0021362446714192629, 0.0030450217891484499, 0.0016658881213515997, 0.0043805199675261974, 0.002075188560411334, 0.0032134132925421, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -7765, -220, 24397, -2595, 289, -16441, -2085, -12638, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 8.7224914750549942e-05, 9.1001464170403779e-05, 0.00011202763562323526, 7.9751502198632807e-05, 0.00012914373655803502, 0.00010842270421562716, 7.9129393270704895e-05, 7.0164664066396654e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -39,-36,4,-95,-1,-70,100,101,-110,-70,-17,-5,-39,11,-60,45,-69,2,28,122,59,-17,15,127,118,82,52,0,-31,-66,-67,-24,-32,99,41,-45,25,-27,96,43,25,9,6,-59,69,-45,-18,-57, 
  /* [1][0][][] */ -16,51,-17,-50,-51,60,-30,-28,-26,87,3,8,47,35,-32,4,-21,-94,76,-30,98,15,-87,26,76,-8,-84,56,48,-27,52,39,-35,-13,3,-5,-19,114,-15,-26,62,55,5,-7,127,11,-28,73, 
  /* [2][0][][] */ -16,-36,112,11,86,-40,-37,26,-31,24,2,56,-8,-26,-40,-127,-62,-89,-52,32,-121,37,-45,-57,-50,8,1,-49,-63,5,-21,-39,-6,9,36,7,4,-23,-62,-18,43,-11,35,-71,-22,-30,-65,-48, 
  /* [3][0][][] */ 58,0,69,-22,16,-15,30,72,-40,-13,36,-5,-44,12,-13,37,58,34,-21,31,-120,-53,127,19,9,29,-67,-47,-39,74,84,-70,-7,-91,-15,39,-4,-79,-14,71,-82,-53,60,-22,-84,-79,51,-30, 
  /* [4][0][][] */ 29,-21,63,-53,10,-15,11,1,-47,-16,-12,26,37,-69,46,-90,38,42,-32,-26,21,30,43,15,-7,34,72,-3,50,19,-127,2,-4,-18,22,14,70,5,-1,-13,-50,-14,-61,45,2,-84,2,25, 
  /* [5][0][][] */ 40,-58,76,54,37,40,28,14,-74,-11,-74,25,45,-4,28,-51,92,93,-16,-17,105,-81,127,-105,-64,38,-10,77,6,22,-31,-50,-14,-62,-43,12,71,34,83,-22,-88,63,28,22,27,-19,78,8, 
  /* [6][0][][] */ -68,31,-122,99,34,6,23,29,-12,-21,38,-112,-69,-21,-36,17,-89,36,-58,91,25,51,-72,-41,8,-21,54,74,-40,-49,-46,17,18,53,-39,-67,3,-17,108,-6,90,100,-127,-45,-66,119,-51,-24, 
  /* [7][0][][] */ -7,96,-91,34,29,42,91,70,61,107,-106,1,-73,-4,-88,-50,22,39,90,105,96,-47,111,1,73,96,-56,127,-102,28,7,-101,16,-48,-35,16,21,109,-78,110,-82,48,-16,-112,56,21,83,-74, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0037070587277412415, 0.0038675621617585421, 0.0047611743211746216, 0.0033894388470798731, 0.0054886084981262684, 0.0046079647727310658, 0.003362999064847827, 0.0029819982592016459, } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -216, 9994, 1639, -964, 2849, -892, 542, -6068, -5057, 413, -5216, -250, -1780, -138, -5509, 3369, 9381, 549, -2065, -5348, -7349, 3483, 12119, -1836, -2812, -3327, 2688, -7742, -1646, 262, -7264, -1386, 7961, 3028, 5103, -1755, -29, -2369, 6586, 3462, 779, -446, 1828, 8166, -3987, 15828, -549, 2149, };
const TfArray<48, float> quant28_scale = { 48, { 0.00035621537244878709, 0.00011159694258822128, 0.00069527752930298448, 0.00025209248997271061, 0.00019253604114055634, 0.00060459872474893928, 0.00031027395743876696, 0.00028828179347328842, 0.00012781642726622522, 0.00028822710737586021, 0.00014763725630473346, 0.001711313845589757, 0.00039899340481497347, 0.0010526502737775445, 0.00022374141553882509, 0.00069320376496762037, 0.00012281257659196854, 8.4984400018583983e-05, 0.00018268515123054385, 0.00022871463443152606, 0.00023501183022744954, 0.00025691837072372437, 0.00010914996528299525, 0.0004411991685628891, 0.00019671233894769102, 0.00035649226629175246, 0.00032307585934177041, 0.00016715413948986679, 0.00021804148855153471, 0.00040860101580619812, 0.00012598988541867584, 0.00027722673257812858, 7.9331497545354068e-05, 0.00017982689314521849, 0.00013592527830041945, 0.00019821558089461178, 0.0022006910294294357, 0.00029219090356491506, 0.00018526925123296678, 0.00017898519581649452, 0.00020916585344821215, 0.00013005918299313635, 0.00039790329174138606, 0.00024904511519707739, 0.0002814065373968333, 9.0931913291569799e-05, 9.5290262834168971e-05, 0.00017257359286304563, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 23,-65,1,50,-19,-73,-36,57,-19,1,-48,8,52,-34,-2,10,96,3,27,39,4,-25,-66,30,0,-7,-20,-1,-39,75,-38,-127,43,-37,-63,-71,-13,-24,43,19,3,66,4,-41,5,46,127,26, -127,-100,-30,127,-82,127,-64,127,24,41,-59,4,45,7,16,-31,-22,-4,18,45,38,127,33,127,127,-20,-57,57,73,-124,-18,-15,52,-11,-19,-127,30,39,-89,-75,-107,16,-127,-127,60,16,48,124, -16,-25,-2,23,-40,3,29,96,-6,-40,-88,29,6,-13,17,6,-53,20,-80,-17,-2,-28,127,9,-40,-2,-16,48,29,43,-20,41,-48,-44,-31,90,9,17,3,69,44,-32,32,-54,-4,22,-19,-42, 
  /* [0][1][][] */ -22,-24,-33,-2,38,-90,127,-60,-13,0,60,46,127,-12,7,-21,-9,-27,70,49,56,-95,20,-4,-70,127,-98,-5,127,-84,21,-55,-32,-8,-92,2,4,-47,-26,55,127,127,45,-64,-42,-73,7,83, 94,-127,127,-21,127,127,-50,-38,6,127,127,-127,-101,127,127,127,127,124,119,127,127,77,0,-1,118,-65,-127,94,38,127,127,61,-127,127,127,121,-127,127,-127,-125,22,20,-104,-7,127,-127,-10,48, 16,12,-51,-10,-69,83,-111,96,52,-91,-6,105,-18,16,27,-59,18,9,-127,11,39,-114,-17,-13,97,0,-16,127,-68,-47,19,11,-75,-2,77,-36,40,5,8,-127,112,-18,56,20,-55,60,67,-108, 
  /* [0][2][][] */ -5,36,5,-19,7,-48,-15,5,32,-22,86,8,-28,-46,22,-2,-45,2,67,-53,-19,-31,67,-16,-104,19,68,-20,-1,-4,1,27,4,-26,-76,20,2,-1,50,10,-8,18,18,-5,-18,2,-25,10, 48,4,-39,-31,21,65,112,-75,127,-23,-18,12,-86,-37,-15,-73,1,127,48,17,-12,23,-22,-30,-73,64,117,-9,-93,16,-41,28,-38,-28,-28,57,52,-5,7,105,-103,-23,-30,51,30,15,3,-127, -8,28,-4,-12,-34,26,-25,-34,6,-30,23,46,43,-21,1,0,46,38,2,-31,19,-13,-48,-22,24,-11,51,-18,-16,-3,-26,68,3,-34,-33,-55,-13,11,74,-48,7,-35,21,-21,-20,0,39,-32, 
};
const TfArray<48, float> quant29_scale = { 48, { 0.015139153227210045, 0.004742870107293129, 0.029549293220043182, 0.010713931173086166, 0.0081827817484736443, 0.025695445016026497, 0.013186642900109291, 0.012251975946128368, 0.0054321982897818089, 0.012249652296304703, 0.0062745832838118076, 0.072730839252471924, 0.016957219690084457, 0.044737637042999268, 0.0095090102404356003, 0.02946116030216217, 0.0052195345051586628, 0.0036118368152529001, 0.0077641187235713005, 0.0097203720360994339, 0.0099880024790763855, 0.010919030755758286, 0.0046388735063374043, 0.018750963732600212, 0.0083602741360664368, 0.015150921419262886, 0.013730724342167377, 0.0071040508337318897, 0.0092667629942297935, 0.01736554317176342, 0.0053545697592198849, 0.011782135814428329, 0.0033715886529535055, 0.0076426430605351925, 0.0057768239639699459, 0.008424161933362484, 0.093529365956783295, 0.012418113648891449, 0.0078739430755376816, 0.0076068704947829247, 0.0088895484805107117, 0.0055275154300034046, 0.016910890117287636, 0.010584417730569839, 0.01195977721363306, 0.0038646063767373562, 0.0040498361922800541, 0.0073343776166439056, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 1558, 2226, 12654, 380, 3814, -2527, 7119, 11790, 5570, -1097, 6978, -3404, 22713, -2154, 3027, 22922, -332, 4676, -414, 3127, 2727, 5084, 734, 9132, 5307, 2765, 7021, 1147, 4183, 4761, 1272, 1853, 231, 1207, -559, -297, -1725, -760, 2687, 1601, 5324, 1394, 5870, 7131, 5906, 2945, 2245, 5135, };
const TfArray<48, float> quant30_scale = { 48, { 0.00027361119282431901, 0.00028172324527986348, 8.1466889241710305e-05, 0.00034162614610977471, 0.00017580136773176491, 0.000223494105739519, 0.00014075591752771288, 8.179733413271606e-05, 0.00013871467672288418, 0.00023065661662258208, 0.00013613505871035159, 0.00018895851098932326, 4.6951154217822477e-05, 0.00020579724514391273, 0.00020533803035505116, 4.9728594603948295e-05, 0.00037374231033027172, 0.00014010275481268764, 0.00027368732844479382, 0.0002140958677046001, 0.00021366467990446836, 0.0001742488966556266, 0.00031281792325899005, 0.00010393787670182064, 0.00013491717982105911, 0.00019518687622621655, 0.00012158080062363297, 0.00030889236950315535, 0.00018935237312689424, 0.00015838889521546662, 0.00034116834285669029, 0.00031041185138747096, 0.00052909163059666753, 0.00028997607296332717, 0.00025542642106302083, 0.00024919709539972246, 0.00026692630490288138, 0.00026934678317047656, 0.00021963511244393885, 0.00025761360302567482, 0.00014629577344749123, 0.0003092590777669102, 0.00016110161959659308, 0.00012889763456769288, 0.00014336752064991742, 0.00027184962527826428, 0.00032670018845237792, 0.00017269224917981774, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 127,127,-72,-55,-7,76,15,15, 
  /* [1][0][][] */ 39,-70,28,-127,-26,41,-79,-33, 
  /* [2][0][][] */ -13,127,106,20,97,-4,44,11, 
  /* [3][0][][] */ 101,24,-107,46,-12,-72,-127,-35, 
  /* [4][0][][] */ -50,69,34,-126,-8,127,127,74, 
  /* [5][0][][] */ 11,34,-127,-40,27,43,17,-20, 
  /* [6][0][][] */ 17,127,63,33,64,23,7,-95, 
  /* [7][0][][] */ 127,-30,-24,30,-2,5,90,17, 
  /* [8][0][][] */ 74,70,47,81,98,95,125,-127, 
  /* [9][0][][] */ 29,127,-103,-48,-24,100,7,66, 
  /* [10][0][][] */ -62,-60,23,-67,-16,-50,-91,127, 
  /* [11][0][][] */ 41,-85,-127,-41,52,11,41,-16, 
  /* [12][0][][] */ -21,-76,-127,-23,-106,25,-49,16, 
  /* [13][0][][] */ 9,-4,-116,84,-127,-14,-8,-21, 
  /* [14][0][][] */ -61,-33,-127,-17,41,-8,-16,-34, 
  /* [15][0][][] */ 16,-89,-127,50,-76,-33,-22,-27, 
  /* [16][0][][] */ 127,-31,-2,60,-63,19,27,72, 
  /* [17][0][][] */ -8,108,127,-11,-25,-22,-33,-30, 
  /* [18][0][][] */ -8,-127,55,113,3,-81,88,-92, 
  /* [19][0][][] */ 127,-71,-58,39,-85,9,35,80, 
  /* [20][0][][] */ -31,-127,90,73,-8,-94,6,-107, 
  /* [21][0][][] */ -45,-46,7,-44,127,-27,61,36, 
  /* [22][0][][] */ -127,33,-107,-6,80,62,-107,-119, 
  /* [23][0][][] */ -81,-57,46,-24,-80,75,127,-30, 
  /* [24][0][][] */ -25,99,-10,-72,-105,122,127,76, 
  /* [25][0][][] */ -5,-127,-102,-63,-16,-32,-16,-79, 
  /* [26][0][][] */ 19,21,-14,98,-127,51,-27,-36, 
  /* [27][0][][] */ 4,-99,51,67,-7,-47,-11,-127, 
  /* [28][0][][] */ -19,55,72,57,127,-55,25,-49, 
  /* [29][0][][] */ 114,53,-11,6,71,-127,-119,26, 
  /* [30][0][][] */ 36,8,37,-127,29,-1,21,-16, 
  /* [31][0][][] */ 54,-25,-19,57,-39,32,26,127, 
  /* [32][0][][] */ -17,-47,14,-61,-53,127,34,92, 
  /* [33][0][][] */ 2,39,32,-40,43,127,-104,71, 
  /* [34][0][][] */ -5,127,-65,-55,3,51,-85,81, 
  /* [35][0][][] */ 12,-127,92,88,26,-114,103,-25, 
  /* [36][0][][] */ 4,-33,-75,-14,-127,-41,7,-15, 
  /* [37][0][][] */ -45,-127,91,95,-42,-66,-18,-52, 
  /* [38][0][][] */ -69,36,62,-38,-127,-60,-46,73, 
  /* [39][0][][] */ 40,-127,50,65,-38,-83,-5,-93, 
  /* [40][0][][] */ -14,87,41,42,-127,-9,-84,41, 
  /* [41][0][][] */ 81,127,-43,-80,22,24,-30,43, 
  /* [42][0][][] */ -1,-52,-17,4,127,8,40,20, 
  /* [43][0][][] */ 127,15,112,37,-66,-15,79,86, 
  /* [44][0][][] */ 80,34,-10,6,43,-126,-127,37, 
  /* [45][0][][] */ 36,12,17,-5,42,-127,-3,-36, 
  /* [46][0][][] */ 83,-60,-8,127,52,46,17,78, 
  /* [47][0][][] */ -127,-36,79,68,-21,-28,28,4, 
};
const TfArray<48, float> quant31_scale = { 48, { 0.0036960614379495382, 0.0038056429475545883, 0.0011004909174516797, 0.004614837933331728, 0.0023748029489070177, 0.0030190576799213886, 0.001901393523439765, 0.0011049547465518117, 0.001873819506727159, 0.0031158120837062597, 0.0018389727920293808, 0.002552535617724061, 0.00063423707615584135, 0.0027800006791949272, 0.0027737973723560572, 0.00067175592994317412, 0.0050486773252487183, 0.0018925701733678579, 0.0036970898509025574, 0.0028921021148562431, 0.0028862773906439543, 0.0023538314271718264, 0.0042256833985447884, 0.0014040389796718955, 0.001822521211579442, 0.0026366710662841797, 0.001642367453314364, 0.0041726552881300449, 0.0025578560307621956, 0.0021395876538008451, 0.0046086534857749939, 0.0041931811720132828, 0.0071472050622105598, 0.0039171255193650723, 0.0034504134673625231, 0.0033662649802863598, 0.0036057592369616032, 0.0036384558770805597, 0.0029669287614524364, 0.0034799592103809118, 0.0019762283191084862, 0.0041776089929044247, 0.0021762321703135967, 0.00174120650626719, 0.0019366721389815211, 0.0036722656805068254, 0.00441321125254035, 0.0023328035604208708, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 5313, 10287, -7304, 7912, -5801, 7255, -13353, -13942, };
const TfArray<8, float> quant32_scale = { 8, { 0.00018658695626072586, 0.00011731171980500221, 0.00013608328299596906, 0.00010296775144524872, 0.00015276740305125713, 9.8966571385972202e-05, 0.00014585255121346563, 0.00010196619405178353, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -43,-6,47,16,-29,-14,6,7,-52,-17,-63,-47,-20,-68,-13,-30,41,-40,51,44,-19,38,-22,23,5,-33,58,-8,12,-18,9,21,71,29,35,-127,15,23,-10,-38,8,-12,43,50,36,9,26,1, 
  /* [1][0][][] */ -13,48,69,15,-30,41,-34,-24,9,44,-18,-89,3,112,-29,42,-21,34,-32,-52,-12,-60,-36,28,-65,-16,-23,-101,-28,-25,42,-69,49,85,-8,-5,114,-48,-2,57,-30,91,-76,-10,127,-36,-32,-27, 
  /* [2][0][][] */ -12,-13,-60,27,-1,67,7,-13,-11,43,4,40,64,-73,8,-57,40,-82,25,28,-21,48,-13,38,-35,55,-7,-68,-5,0,28,-57,-31,-72,19,-8,117,-4,-15,-49,-2,33,93,34,127,10,32,23, 
  /* [3][0][][] */ -6,21,-68,28,28,-36,-77,-112,23,-16,-51,21,13,21,29,76,-27,15,-47,35,-6,-106,24,-34,-80,7,127,-7,-40,4,-62,22,-22,-88,22,-20,-24,-46,-36,98,-64,-53,2,6,45,13,-57,51, 
  /* [4][0][][] */ -35,-52,2,17,34,-24,1,-1,4,-24,65,-80,11,31,14,7,-12,-14,18,-17,-3,-52,9,-23,23,-11,46,36,41,13,-16,32,-9,-11,-2,15,-55,93,41,-25,25,-14,-12,-14,-71,7,127,14, 
  /* [5][0][][] */ 55,-5,23,23,7,-56,47,-127,21,-37,-16,112,-111,82,11,-81,23,-85,23,3,-51,59,-76,-56,-66,66,-49,7,-26,44,-49,-43,25,61,30,-26,-34,-19,-69,-46,52,-37,-74,7,-35,58,103,17, 
  /* [6][0][][] */ 60,-30,12,-8,-44,-31,-41,8,-35,8,-42,127,-42,-32,-12,58,17,39,25,47,24,-71,-15,23,13,37,-71,13,2,-52,17,32,-8,16,-16,16,23,-3,-8,10,-5,-16,36,71,6,-24,72,-7, 
  /* [7][0][][] */ -25,-10,-22,93,39,19,-13,17,31,17,59,21,112,108,76,41,29,47,-11,14,13,-24,-114,-40,10,-7,-27,58,45,-37,-30,-19,19,-2,35,-109,-74,24,26,44,-46,59,90,127,-56,-2,-119,80, 
};
const TfArray<8, float> quant33_scale = { 8, { 0.0079299453645944595, 0.0049857478588819504, 0.0057835392653942108, 0.0043761292472481728, 0.00649261474609375, 0.0042060790583491325, 0.0061987335793673992, 0.0043335631489753723, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 10629, 5332, 6588, -1753, 1505, -2825, 4083, 35613, 1050, 1065, 7170, 70912, 3867, 2485, -479, 6312, 497, 15178, 1818, 10593, 7089, -269, 2129, -11429, 14077, 1954, 1809, 11909, 2839, 638, -6266, 12341, 1043, 1301, 2130, 5527, -7970, 9810, 5477, 18831, -1702, -1970, 5712, 1649, -477, 3079, 6541, -1183, };
const TfArray<48, float> quant34_scale = { 48, { 0.00011623138561844826, 0.00012344984861556441, 0.00014430633746087551, 0.00022307246399577707, 0.00040740310214459896, 0.00014968110190238804, 6.2451683334074914e-05, 9.69963293755427e-05, 0.0001412736892234534, 8.9217974164057523e-05, 7.0508234784938395e-05, 3.6317778722150251e-05, 7.6434298534877598e-05, 9.1519294073805213e-05, 0.0001925396645674482, 0.00019490592239890248, 9.7436153737362474e-05, 0.00058409012854099274, 0.00010193656635237858, 8.9563254732638597e-05, 0.00013799406588077545, 0.00025172883761115372, 0.00018829586042556912, 0.00020000152289867401, 9.2186048277653754e-05, 0.00011907034058822319, 5.8598870964488015e-05, 0.00010130950977327302, 0.00014119881961960346, 0.00089761073468253016, 0.00016720403800718486, 7.6958633144386113e-05, 0.00010698955156840384, 0.0002144606551155448, 0.00012953922851011157, 0.00010101501538883895, 8.0303601862397045e-05, 6.0000431403750554e-05, 0.00014154234668239951, 5.9402478655101731e-05, 0.00011056392395403236, 0.00018343307601753622, 7.8586388553958386e-05, 0.0001113657999667339, 7.1984912210609764e-05, 0.00024348171427845955, 7.4970310379285365e-05, 0.00017315482546109706, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -70,-52,-127,-46,127,-49,98,-33,-80,-78,-23,2,94,32,71,-127,35,-13,12,-56,-102,70,-14,28,-17,46,68,-32,58,-85,24,-127,-93,-119,38,91,66,80,58,-82,-127,-5,18,59,30,-127,85,62, -30,-18,-69,50,-89,107,81,-87,-59,41,56,-83,112,70,108,-95,-111,-79,38,-29,-127,122,-108,115,-104,60,98,-122,63,-66,-22,-91,-25,-72,49,127,90,127,65,-73,-124,-69,47,122,121,96,91,50, 10,-19,-14,90,-54,-7,35,-12,75,24,42,-93,13,69,-24,-16,-111,6,35,37,-53,-3,-61,-8,-67,7,44,-84,10,79,108,-47,60,-10,-18,52,90,83,21,25,-42,127,26,42,85,23,-16,-127, 
  /* [0][1][][] */ -79,-35,-120,-48,-76,-59,79,-100,-127,-127,92,-38,112,49,-114,-53,127,-127,-55,-113,-2,127,-49,37,-15,112,127,-29,-119,-98,17,-81,-98,-127,-127,59,101,70,-17,-102,56,-17,91,84,98,80,121,-107, -49,-101,-120,-68,-40,127,117,-127,61,95,127,-121,127,127,49,-104,61,-101,-127,-127,-41,123,-103,127,-127,127,122,-127,-127,127,-73,-99,-127,-71,33,85,127,71,-18,-127,118,-110,127,127,127,-28,127,112, -8,-127,-127,127,61,-53,44,-34,61,39,10,-111,2,75,84,-31,-3,8,-26,-85,-12,52,30,-14,-126,37,2,-75,-81,55,127,-61,-48,22,43,43,99,15,-19,-41,60,127,65,21,79,-72,13,5, 
  /* [0][2][][] */ -127,-18,-2,37,-51,-20,75,-38,2,-50,14,-45,26,26,-65,-8,-85,-37,103,-82,14,54,-83,13,-4,-13,123,-25,58,76,-17,-44,16,-112,-68,9,53,23,-89,-53,0,-30,55,44,70,40,18,-68, -82,-92,28,-64,75,57,127,-69,70,28,-32,-127,44,21,-127,-35,4,-1,46,-44,-15,93,-127,60,-40,16,102,-38,68,-3,-70,-27,-68,-9,-83,32,20,39,-127,-74,9,-87,70,84,53,-117,22,-8, -24,-88,-71,-14,-3,2,51,-34,-43,2,6,-71,9,39,30,50,-10,23,-3,-111,-28,53,8,-9,-73,-22,5,-65,13,-98,41,-16,-43,42,9,51,-2,36,-71,0,19,77,21,50,61,-21,-2,35, 
};
const TfArray<48, float> quant35_scale = { 48, { 0.0049398336559534073, 0.0052466182969510555, 0.0061330194585025311, 0.0094805797562003136, 0.01731463149189949, 0.0063614468090236187, 0.0026541964616626501, 0.0041223438456654549, 0.0060041313990950584, 0.0037917636800557375, 0.0029966000001877546, 0.0015435055829584599, 0.0032484575640410185, 0.0038895697798579931, 0.0081829354166984558, 0.0082835014909505844, 0.0041410364210605621, 0.024823829531669617, 0.0043323040008544922, 0.0038064382970333099, 0.0058647477999329567, 0.010698474943637848, 0.008002573624253273, 0.0085000647231936455, 0.0039179068990051746, 0.0050604892894625664, 0.0024904520250856876, 0.0043056542053818703, 0.0060009495355188847, 0.038148455321788788, 0.0071061714552342892, 0.0032707417849451303, 0.0045470558106899261, 0.0091145774349570274, 0.0055054170079529285, 0.0042931381613016129, 0.0034129030536860228, 0.0025500182528048754, 0.0060155494138598442, 0.0025246052537113428, 0.0046989666298031807, 0.0077959056943655014, 0.0033399215899407864, 0.0047330465167760849, 0.0030593588016927242, 0.010347972624003887, 0.0031862379983067513, 0.0073590800166130066, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 1255, -269, -421, 2086, 4682, 1319, -510, 6661, 1522, 1354, 16, 1509, 555, 561, -471, -25, 3566, 13327, 2920, -372, 1002, -743, -660, 2301, -190, -470, 1167, 0, 4145, 15939, 2774, -127, 170, -640, 1690, -540, -252, -384, 1336, 903, 1329, 3204, 102, -652, 369, 2473, 780, -106, };
const TfArray<48, float> quant36_scale = { 48, { 0.00046375318197533488, 0.00046573858708143234, 0.00041929641156457365, 0.00030579790472984314, 0.00017973739886656404, 0.00048550081555731595, 0.00063917867373675108, 0.00015183258801698685, 0.00035324256168678403, 0.00056358095025643706, 0.00054206163622438908, 0.00042851551552303135, 0.0003653824096545577, 0.00035060889786109328, 0.0004834685823880136, 0.00058412825455889106, 0.00025629508309066296, 7.9630568507127464e-05, 0.00030754590989090502, 0.00053953722817823291, 0.00048753831651993096, 0.0002850811870303005, 0.00039856394869275391, 0.00031160449725575745, 0.000470723956823349, 0.00095106934895738959, 0.00042950356146320701, 0.00065056805033236742, 0.00021040985302533954, 6.92458197590895e-05, 0.00027626479277387261, 0.00081307906657457352, 0.00053393206326290965, 0.000364458974217996, 0.00043594057206064463, 0.00042372371535748243, 0.00035094187478534877, 0.00062148721190169454, 0.00040564424125477672, 0.00058082467876374722, 0.00052312755724415183, 0.00025559737696312368, 0.00042625109199434519, 0.00046804020530544221, 0.00056727870833128691, 0.00026068088482134044, 0.00039565618499182165, 0.00048945093294605613, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -34,12,3,-18,-127,-28,-102,19, 
  /* [1][0][][] */ 51,-81,-57,-90,127,-90,80,16, 
  /* [2][0][][] */ -59,94,-23,-127,35,17,-29,74, 
  /* [3][0][][] */ 66,24,127,18,75,83,75,-33, 
  /* [4][0][][] */ -5,-127,52,63,-2,-80,5,-29, 
  /* [5][0][][] */ 127,-15,57,49,-80,-12,-3,-5, 
  /* [6][0][][] */ 16,15,127,-31,27,-63,-56,13, 
  /* [7][0][][] */ 51,-5,-127,-39,-44,124,116,-78, 
  /* [8][0][][] */ -17,127,-71,-18,70,40,25,51, 
  /* [9][0][][] */ -26,123,-33,21,18,-127,54,85, 
  /* [10][0][][] */ 15,-127,-3,-15,-61,-89,-61,-64, 
  /* [11][0][][] */ -127,-90,120,29,-33,-70,76,48, 
  /* [12][0][][] */ -30,37,-127,27,9,-49,-63,78, 
  /* [13][0][][] */ 117,-127,108,93,19,28,52,-65, 
  /* [14][0][][] */ -39,78,-44,-127,-24,-38,14,-51, 
  /* [15][0][][] */ 14,63,38,-29,14,-66,67,-127, 
  /* [16][0][][] */ -127,-85,-28,84,-39,28,-42,64, 
  /* [17][0][][] */ -51,-93,-127,56,-49,72,-47,63, 
  /* [18][0][][] */ -123,-74,38,126,-47,42,-84,127, 
  /* [19][0][][] */ 82,-101,127,-85,-1,-78,24,-20, 
  /* [20][0][][] */ 8,31,24,9,7,127,82,-27, 
  /* [21][0][][] */ 7,106,37,-38,38,-81,91,-127, 
  /* [22][0][][] */ 39,-18,77,50,-33,127,30,-33, 
  /* [23][0][][] */ -127,-43,33,-109,84,68,-62,-90, 
  /* [24][0][][] */ -71,-68,22,-71,90,98,-39,-127, 
  /* [25][0][][] */ 127,0,-49,-9,27,22,-56,-16, 
  /* [26][0][][] */ -127,-27,-125,-38,-36,-36,15,-10, 
  /* [27][0][][] */ 111,47,10,-65,-115,-24,127,93, 
  /* [28][0][][] */ -126,-114,-27,24,-80,-127,-30,37, 
  /* [29][0][][] */ 127,63,82,-74,1,-18,-67,-104, 
  /* [30][0][][] */ -90,-80,38,-39,46,68,-42,-127, 
  /* [31][0][][] */ 47,29,-5,127,-13,-60,-4,7, 
  /* [32][0][][] */ -33,127,-24,45,9,108,2,68, 
  /* [33][0][][] */ -91,127,-73,12,10,-36,-58,6, 
  /* [34][0][][] */ -70,-97,-33,127,4,2,36,75, 
  /* [35][0][][] */ -59,127,-29,-3,66,109,63,81, 
  /* [36][0][][] */ 78,34,-19,-34,-119,-55,95,127, 
  /* [37][0][][] */ -61,107,43,27,-127,92,-35,-55, 
  /* [38][0][][] */ 44,20,81,21,127,93,118,77, 
  /* [39][0][][] */ -41,-92,31,-30,-7,28,-112,127, 
  /* [40][0][][] */ -78,-30,-58,127,-33,26,7,49, 
  /* [41][0][][] */ 127,5,113,74,-56,-13,-9,-40, 
  /* [42][0][][] */ -44,13,-57,-127,52,-82,1,73, 
  /* [43][0][][] */ 43,-11,59,4,29,127,103,-5, 
  /* [44][0][][] */ -9,-22,-42,127,36,3,-29,-38, 
  /* [45][0][][] */ 60,126,88,-127,37,-101,12,-101, 
  /* [46][0][][] */ -46,-114,-27,43,22,58,-57,127, 
  /* [47][0][][] */ 32,24,86,8,62,120,127,-47, 
};
const TfArray<48, float> quant37_scale = { 48, { 0.003852170193567872, 0.0038686620537191629, 0.0034828896168619394, 0.0025401131715625525, 0.0014929904136806726, 0.0040328172035515308, 0.0053093438036739826, 0.0012611988931894302, 0.0029342127963900566, 0.0046813907101750374, 0.0045026401057839394, 0.0035594683140516281, 0.0030350524466484785, 0.0029123362619429827, 0.004015936516225338, 0.0048520667478442192, 0.0021289174910634756, 0.00066145206801593304, 0.0025546329561620951, 0.0044816713780164719, 0.0040497416630387306, 0.002368029672652483, 0.0033106752671301365, 0.0025883456692099571, 0.0039100730791687965, 0.0079000666737556458, 0.0035676753614097834, 0.0054039498791098595, 0.0017477713990956545, 0.00057519105030223727, 0.0022947960533201694, 0.0067538488656282425, 0.0044351117685437202, 0.0030273818410933018, 0.0036211444530636072, 0.0035196649841964245, 0.002915102057158947, 0.0051623894833028316, 0.0033694878220558167, 0.0048246257938444614, 0.004345363937318325, 0.0021231221035122871, 0.0035406588576734066, 0.0038877804763615131, 0.0047121061943471432, 0.0021653482690453529, 0.0032865218818187714, 0.0040656290948390961, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -7784, -1180, 7009, -11915, 17677, 6526, -5585, 10632, };
const TfArray<8, float> quant38_scale = { 8, { 0.00018048826314043254, 0.00021069031208753586, 0.00021010922500863671, 0.00028367296908982098, 0.00020422156376298517, 0.00022081728093326092, 0.00019678504031617194, 0.0003076022258028388, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -19,-11,-25,-86,-40,-34,28,-22,47,13,-39,-14,110,127,-27,-95, 
  /* [1][0][][] */ 127,-55,-64,11,-58,61,-58,-34,-67,88,-25,-59,-14,-5,-61,-7, 
  /* [2][0][][] */ -40,-91,38,62,38,-68,-69,1,40,-99,38,-127,64,-29,-67,27, 
  /* [3][0][][] */ 46,8,9,22,-11,67,-51,-12,127,43,15,2,12,-9,11,11, 
  /* [4][0][][] */ -76,-31,-27,-127,-7,28,64,-83,28,-35,-40,-26,-106,16,-37,-8, 
  /* [5][0][][] */ 92,43,51,-62,38,-45,-127,-124,-2,-68,66,51,-46,59,55,-37, 
  /* [6][0][][] */ 105,39,-127,-90,23,-85,8,-74,-40,27,-119,88,86,-85,8,71, 
  /* [7][0][][] */ -127,-14,89,-25,-69,2,-14,-69,-59,71,89,-23,59,-20,27,20, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0076707513071596622, 0.0089543377980589867, 0.008929641917347908, 0.012056101113557816, 0.0086794160306453705, 0.0093847345560789108, 0.0083633642643690109, 0.013073094189167023, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 12332, -329, 924, 2686, 160, 451, 7833, 1501, 1145, 291, -933, 3069, 3819, 248, 532, -980, };
const TfArray<16, float> quant40_scale = { 16, { 0.00017090870824176818, 0.00025515636662021279, 0.00014650486991740763, 0.0002173402754124254, 0.0010796485003083944, 0.00087035604519769549, 0.00016613547632005066, 0.00085306668188422918, 0.00061200466006994247, 0.0012438057456165552, 0.00036806394928134978, 0.00021530501544475555, 9.3501184892375022e-05, 0.00017613646923564374, 0.00031506564118899405, 0.00045729373232461512, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 5,-15,16,20,-23,9,18,15,-24,-11,-8,-35,19,-7,0,-6, -1,-11,15,26,9,-2,20,-29,-9,9,-10,61,-36,21,-12,-1, -5,-12,2,24,0,-13,16,11,-18,1,-4,-18,6,-4,-23,-3, 
  /* [0][1][][] */ 16,-20,2,9,127,-25,-127,-22,127,127,-5,-7,127,-20,-11,-28, -127,127,127,2,-90,-90,-4,-105,18,-106,127,127,87,127,127,127, 10,-25,-20,7,-10,127,23,-9,-19,-13,-10,-6,14,-3,-37,-14, 
  /* [0][2][][] */ 3,-12,2,-22,-26,15,45,8,-19,-8,-12,1,14,4,-25,-18, 18,-24,4,-127,0,-15,-11,127,-6,1,-17,-11,-24,-53,-28,-42, 5,-7,-6,9,-6,-3,7,0,-21,1,-16,-1,2,-4,-28,-16, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0072636199183762074, 0.010844144970178604, 0.0062264567241072655, 0.0092369616031646729, 0.045885059982538223, 0.036990132182836533, 0.0070607573725283146, 0.036255333572626114, 0.026010198518633842, 0.052861742675304413, 0.015642717480659485, 0.0091504631564021111, 0.0039738002233207226, 0.0074857999570667744, 0.01339028961956501, 0.019434982910752296, } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&g0::quant8_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { 122, -3251, -1106, 4562, 58585, 75481, 5669, -5094, 4542, -4911, 1001, -115, 1812, -47597, -2745, 38894, };
const TfArray<16, float> quant42_scale = { 16, { 0.00025482266210019588, 0.00096917455084621906, 0.0002658752491697669, 0.00021696175099350512, 3.6379580706125125e-05, 2.806279735523276e-05, 0.00017130975902546197, 3.0727340345038101e-05, 0.00019552832236513495, 0.00012074987898813561, 0.00052779971156269312, 0.0012219550553709269, 0.00078828510595485568, 2.5996423573815264e-05, 0.00062595016788691282, 8.7932290625758469e-05, } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -84, -109, -29, 
  /* [0][1][][] */ 67, -36, 18, 
  /* [0][2][][] */ 33, 127, 21, 
  /* [1][0][][] */ 111, -94, -8, 
  /* [1][1][][] */ -127, 110, 26, 
  /* [1][2][][] */ 15, 0, -12, 
  /* [2][0][][] */ -22, -1, -48, 
  /* [2][1][][] */ 37, 97, 127, 
  /* [2][2][][] */ -11, -94, -80, 
  /* [3][0][][] */ 118, 123, 52, 
  /* [3][1][][] */ 0, -23, -20, 
  /* [3][2][][] */ -102, -127, -49, 
  /* [4][0][][] */ 35, -37, 9, 
  /* [4][1][][] */ 30, -127, -1, 
  /* [4][2][][] */ 2, -124, -22, 
  /* [5][0][][] */ -69, 16, -14, 
  /* [5][1][][] */ -127, 20, -14, 
  /* [5][2][][] */ -74, 17, -20, 
  /* [6][0][][] */ -20, 79, 127, 
  /* [6][1][][] */ -53, 53, -19, 
  /* [6][2][][] */ -36, -53, -91, 
  /* [7][0][][] */ 41, 29, -34, 
  /* [7][1][][] */ 127, 78, 5, 
  /* [7][2][][] */ 29, 7, -12, 
  /* [8][0][][] */ -20, -30, 53, 
  /* [8][1][][] */ -53, -87, 127, 
  /* [8][2][][] */ -27, -62, 95, 
  /* [9][0][][] */ -39, 53, -14, 
  /* [9][1][][] */ -40, 127, -27, 
  /* [9][2][][] */ -34, 77, -18, 
  /* [10][0][][] */ 25, 88, 13, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 11, 39, 18, 
  /* [11][0][][] */ 9, -17, 7, 
  /* [11][1][][] */ 67, -91, 32, 
  /* [11][2][][] */ -85, 127, -50, 
  /* [12][0][][] */ -41, 50, -9, 
  /* [12][1][][] */ -127, 115, 7, 
  /* [12][2][][] */ -78, 80, 6, 
  /* [13][0][][] */ 57, 3, -10, 
  /* [13][1][][] */ 127, 88, -4, 
  /* [13][2][][] */ 125, 124, 61, 
  /* [14][0][][] */ -28, -26, 50, 
  /* [14][1][][] */ 47, 102, -127, 
  /* [14][2][][] */ -13, -68, 84, 
  /* [15][0][][] */ -80, -35, 28, 
  /* [15][1][][] */ -127, -112, 45, 
  /* [15][2][][] */ -2, -44, 24, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.064979776740074158, 0.24713949859142303, 0.067798182368278503, 0.05532524362206459, 0.0092767924070358276, 0.0071560130454599857, 0.043683987110853195, 0.0078354710713028908, 0.049859717488288879, 0.030791217461228371, 0.13458891212940216, 0.3115985095500946, 0.20101268589496613, 0.0066290874965488911, 0.15961728990077972, 0.022422732785344124, } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.12038750946521759, } };
const TfArray<1, int> quant46_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.074027769267559052, } };
const TfArray<1, int> quant50_zero = { 1, { -33 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<1, float> quant53_scale = { 1, { 0.068355485796928406, } };
const TfArray<1, int> quant53_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<1, float> quant54_scale = { 1, { 0.09329928457736969, } };
const TfArray<1, int> quant54_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.046589061617851257, } };
const TfArray<1, int> quant58_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant61_scale = { 1, { 0.053677793592214584, } };
const TfArray<1, int> quant61_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<1, float> quant62_scale = { 1, { 0.075768999755382538, } };
const TfArray<1, int> quant62_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<1, float> quant65_scale = { 1, { 0.054328747093677521, } };
const TfArray<1, int> quant65_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<1, float> quant66_scale = { 1, { 0.10360731184482574, } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&g0::quant46_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.048761781305074692, } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.12552608549594879, } };
const TfArray<1, int> quant69_zero = { 1, { -32 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_805866_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_805866_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_805866_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_805866_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_805866_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
