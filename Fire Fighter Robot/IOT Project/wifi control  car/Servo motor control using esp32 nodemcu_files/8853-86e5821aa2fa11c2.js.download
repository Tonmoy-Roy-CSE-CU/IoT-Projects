"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8853],{48853:function(e,n,r){r.d(n,{mL:function(){return u},CL:function(){return a},zd:function(){return c}});var s=r(38966),t=r.n(s),o=JSON.parse('{"Sw":{"D":"use esp_idf_sys as _; // If using the `binstart` feature of `esp-idf-sys`, always keep this module imported\\n\\nfn main() {\\n    esp_idf_sys::link_patches();\\n    println!(\\"Hello world!\\");\\n}\\n","s":"[package]\\nname = \\"rust-project-esp32\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nresolver = \\"2\\"\\n\\n[profile.release]\\nopt-level = \\"s\\"\\n\\n[profile.dev]\\ndebug = true    # Symbols are nice and they don\'t increase the size on Flash\\nopt-level = \\"z\\"\\n\\n[features]\\npio = [\\"esp-idf-sys/pio\\"]\\n\\n[dependencies]\\nesp-idf-sys = { version = \\"0.33.0\\", features = [\\"binstart\\"] }\\nesp-idf-hal = \\"0.41.1\\"\\nesp-idf-svc = \\"0.46.0\\"\\n\\n[build-dependencies]\\nembuild = \\"0.31.1\\"\\n"},"yV":{"D":"use esp_idf_sys as _; // If using the `binstart` feature of `esp-idf-sys`, always keep this module imported\\n\\nfn main() {\\n    esp_idf_sys::link_patches();\\n    println!(\\"Hello world!\\");\\n}\\n","s":"[package]\\nname = \\"rust-project-esp32c3\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nresolver = \\"2\\"\\n\\n[profile.release]\\nopt-level = \\"s\\"\\n\\n[profile.dev]\\ndebug = true    # Symbols are nice and they don\'t increase the size on Flash\\nopt-level = \\"z\\"\\n\\n[features]\\npio = [\\"esp-idf-sys/pio\\"]\\n\\n[dependencies]\\nesp-idf-sys = { version = \\"0.33.0\\", features = [\\"binstart\\"] }\\nesp-idf-hal = \\"0.41.1\\"\\nesp-idf-svc = \\"0.46.0\\"\\n\\n[build-dependencies]\\nembuild = \\"0.31.1\\"\\n"},"cq":{"D":"use esp_idf_sys as _; // If using the `binstart` feature of `esp-idf-sys`, always keep this module imported\\n\\nfn main() {\\n    esp_idf_sys::link_patches();\\n    println!(\\"Hello world!\\");\\n}\\n","s":"[package]\\nname = \\"rust-project-esp32s2\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nresolver = \\"2\\"\\n\\n[profile.release]\\nopt-level = \\"s\\"\\n\\n[profile.dev]\\ndebug = true    # Symbols are nice and they don\'t increase the size on Flash\\nopt-level = \\"z\\"\\n\\n[features]\\npio = [\\"esp-idf-sys/pio\\"]\\n\\n[dependencies]\\nesp-idf-sys = { version = \\"0.33.0\\", features = [\\"binstart\\"] }\\nesp-idf-hal = \\"0.41.1\\"\\nesp-idf-svc = \\"0.46.0\\"\\n\\n[build-dependencies]\\nembuild = \\"0.31.1\\"\\n"},"U6":{"D":"use esp_idf_sys as _; // If using the `binstart` feature of `esp-idf-sys`, always keep this module imported\\n\\nfn main() {\\n    esp_idf_sys::link_patches();\\n    println!(\\"Hello world!\\");\\n}\\n","s":"[package]\\nname = \\"rust-project-esp32s3\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nresolver = \\"2\\"\\n\\n[profile.release]\\nopt-level = \\"s\\"\\n\\n[profile.dev]\\ndebug = true    # Symbols are nice and they don\'t increase the size on Flash\\nopt-level = \\"z\\"\\n\\n[features]\\npio = [\\"esp-idf-sys/pio\\"]\\n\\n[dependencies]\\nesp-idf-sys = { version = \\"0.33.0\\", features = [\\"binstart\\"] }\\nesp-idf-hal = \\"0.41.1\\"\\nesp-idf-svc = \\"0.46.0\\"\\n\\n[build-dependencies]\\nembuild = \\"0.31.1\\"\\n"},"_y":{"D":"use esp_idf_sys as _; // If using the `binstart` feature of `esp-idf-sys`, always keep this module imported\\n\\nfn main() {\\n    esp_idf_sys::link_patches();\\n    println!(\\"Hello world!\\");\\n}\\n","s":"[package]\\nname = \\"rust-project-esp32c3\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nresolver = \\"2\\"\\n\\n[profile.release]\\nopt-level = \\"s\\"\\n\\n[profile.dev]\\ndebug = true    # Symbols are nice and they don\'t increase the size on Flash\\nopt-level = \\"z\\"\\n\\n[features]\\npio = [\\"esp-idf-sys/pio\\"]\\n\\n[dependencies]\\nesp-idf-sys = { version = \\"0.33.0\\", features = [\\"binstart\\"] }\\nesp-idf-hal = \\"0.41.1\\"\\nesp-idf-svc = \\"0.46.0\\"\\n\\n[build-dependencies]\\nembuild = \\"0.31.1\\"\\n"},"Yg":{"D":"#![no_std]\\n#![no_main]\\n\\nuse esp_backtrace as _;\\nuse esp_println::println;\\nuse hal::{clock::ClockControl, peripherals::Peripherals, prelude::*, timer::TimerGroup, Rtc};\\n\\n#[entry]\\nfn main() -> ! {\\n    let peripherals = Peripherals::take();\\n    let mut system = peripherals.DPORT.split();\\n    let clocks = ClockControl::boot_defaults(system.clock_control).freeze();\\n\\n    // Disable the RTC and TIMG watchdog timers\\n    let mut rtc = Rtc::new(peripherals.RTC_CNTL);\\n    let timer_group0 = TimerGroup::new(\\n        peripherals.TIMG0,\\n        &clocks,\\n        &mut system.peripheral_clock_control,\\n    );\\n    let mut wdt0 = timer_group0.wdt;\\n    let timer_group1 = TimerGroup::new(\\n        peripherals.TIMG1,\\n        &clocks,\\n        &mut system.peripheral_clock_control,\\n    );\\n    let mut wdt1 = timer_group1.wdt;\\n    rtc.rwdt.disable();\\n    wdt0.disable();\\n    wdt1.disable();\\n    println!(\\"Hello world!\\");\\n\\n    loop {}\\n}\\n","s":"[package]\\nname = \\"rust_project_esp32\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[dependencies]\\nhal = { package = \\"esp32-hal\\", version = \\"0.12.0\\" }\\nesp-backtrace = { version = \\"0.7.0\\", features = [\\n    \\"esp32\\",\\n    \\"panic-handler\\",\\n    \\"print-uart\\",\\n] }\\nesp-println = { version = \\"0.5.0\\", features = [\\"esp32\\"] }\\nxtensa-lx-rt = { version = \\"0.15.0\\", features = [\\"esp32\\"], optional = true }\\n\\n[features]\\ndefault = [\\"rt\\"]\\nrt = [\\"xtensa-lx-rt\\"]\\n"},"v3":{"D":"#![no_std]\\n#![no_main]\\n\\nuse esp_backtrace as _;\\nuse esp_println::println;\\nuse hal::{clock::ClockControl, peripherals::Peripherals, prelude::*, timer::TimerGroup, Rtc};\\n\\n#[entry]\\nfn main() -> ! {\\n    let peripherals = Peripherals::take();\\n    let mut system = peripherals.SYSTEM.split();\\n    let clocks = ClockControl::boot_defaults(system.clock_control).freeze();\\n\\n    // Disable the RTC and TIMG watchdog timers\\n    let mut rtc = Rtc::new(peripherals.RTC_CNTL);\\n    let timer_group0 = TimerGroup::new(\\n        peripherals.TIMG0,\\n        &clocks,\\n        &mut system.peripheral_clock_control,\\n    );\\n    let mut wdt0 = timer_group0.wdt;\\n    let timer_group1 = TimerGroup::new(\\n        peripherals.TIMG1,\\n        &clocks,\\n        &mut system.peripheral_clock_control,\\n    );\\n    let mut wdt1 = timer_group1.wdt;\\n    rtc.swd.disable();\\n    rtc.rwdt.disable();\\n    wdt0.disable();\\n    wdt1.disable();\\n    println!(\\"Hello world!\\");\\n\\n    loop {}\\n}\\n","s":"[package]\\nname = \\"rust_project_esp32c3\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[dependencies]\\nhal = { package = \\"esp32c3-hal\\", version = \\"0.9.0\\" }\\nesp-backtrace = { version = \\"0.7.0\\", features = [\\n    \\"esp32c3\\",\\n    \\"panic-handler\\",\\n    \\"exception-handler\\",\\n    \\"print-uart\\",\\n] }\\nesp-println = { version = \\"0.5.0\\", features = [\\"esp32c3\\"] }\\n"},"Gm":{"D":"#![no_std]\\n#![no_main]\\n\\nuse esp_backtrace as _;\\nuse esp_println::println;\\nuse hal::{clock::ClockControl, peripherals::Peripherals, prelude::*, timer::TimerGroup, Rtc};\\n\\n#[entry]\\nfn main() -> ! {\\n    let peripherals = Peripherals::take();\\n    let mut system = peripherals.SYSTEM.split();\\n    let clocks = ClockControl::boot_defaults(system.clock_control).freeze();\\n\\n    // Disable the RTC and TIMG watchdog timers\\n    let mut rtc = Rtc::new(peripherals.RTC_CNTL);\\n    let timer_group0 = TimerGroup::new(\\n        peripherals.TIMG0,\\n        &clocks,\\n        &mut system.peripheral_clock_control,\\n    );\\n    let mut wdt0 = timer_group0.wdt;\\n    let timer_group1 = TimerGroup::new(\\n        peripherals.TIMG1,\\n        &clocks,\\n        &mut system.peripheral_clock_control,\\n    );\\n    let mut wdt1 = timer_group1.wdt;\\n    rtc.rwdt.disable();\\n    wdt0.disable();\\n    wdt1.disable();\\n    println!(\\"Hello world!\\");\\n\\n    loop {}\\n}\\n","s":"[package]\\nname = \\"rust_project_esp32s2\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[dependencies]\\nhal = { package = \\"esp32s2-hal\\", version = \\"0.9.0\\" }\\nesp-backtrace = { version = \\"0.7.0\\", features = [\\n    \\"esp32s2\\",\\n    \\"panic-handler\\",\\n    \\"exception-handler\\",\\n    \\"print-uart\\",\\n] }\\nesp-println = { version = \\"0.5.0\\", features = [\\"esp32s2\\"] }\\n"},"Hs":{"D":"#![no_std]\\n#![no_main]\\n\\nuse esp_backtrace as _;\\nuse esp_println::println;\\nuse hal::{clock::ClockControl, peripherals::Peripherals, prelude::*, timer::TimerGroup, Rtc};\\n\\n#[entry]\\nfn main() -> ! {\\n    let peripherals = Peripherals::take();\\n    let mut system = peripherals.SYSTEM.split();\\n    let clocks = ClockControl::boot_defaults(system.clock_control).freeze();\\n\\n    // Disable the RTC and TIMG watchdog timers\\n    let mut rtc = Rtc::new(peripherals.RTC_CNTL);\\n    let timer_group0 = TimerGroup::new(\\n        peripherals.TIMG0,\\n        &clocks,\\n        &mut system.peripheral_clock_control,\\n    );\\n    let mut wdt0 = timer_group0.wdt;\\n    let timer_group1 = TimerGroup::new(\\n        peripherals.TIMG1,\\n        &clocks,\\n        &mut system.peripheral_clock_control,\\n    );\\n    let mut wdt1 = timer_group1.wdt;\\n    rtc.rwdt.disable();\\n    wdt0.disable();\\n    wdt1.disable();\\n    println!(\\"Hello world!\\");\\n\\n    loop {}\\n}\\n","s":"[package]\\nname = \\"rust_project_esp32s3\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[dependencies]\\nhal = { package = \\"esp32s3-hal\\", version = \\"0.9.0\\" }\\nesp-backtrace = { version = \\"0.7.0\\", features = [\\n    \\"esp32s3\\",\\n    \\"panic-handler\\",\\n    \\"exception-handler\\",\\n    \\"print-uart\\",\\n] }\\nesp-println = { version = \\"0.5.0\\", features = [\\"esp32s3\\"] }\\n"},"Im":{"D":"#![no_std]\\n#![no_main]\\n\\nuse esp_backtrace as _;\\nuse esp_println::println;\\nuse hal::{clock::ClockControl, peripherals::Peripherals, prelude::*, timer::TimerGroup, Rtc};\\n\\n#[entry]\\nfn main() -> ! {\\n    let peripherals = Peripherals::take();\\n    let mut system = peripherals.SYSTEM.split();\\n    let clocks = ClockControl::boot_defaults(system.clock_control).freeze();\\n\\n    // Disable the RTC and TIMG watchdog timers\\n    let mut rtc = Rtc::new(peripherals.RTC_CNTL);\\n    let timer_group0 = TimerGroup::new(\\n        peripherals.TIMG0,\\n        &clocks,\\n        &mut system.peripheral_clock_control,\\n    );\\n    let mut wdt0 = timer_group0.wdt;\\n    let timer_group1 = TimerGroup::new(\\n        peripherals.TIMG1,\\n        &clocks,\\n        &mut system.peripheral_clock_control,\\n    );\\n    let mut wdt1 = timer_group1.wdt;\\n    rtc.swd.disable();\\n    rtc.rwdt.disable();\\n    wdt0.disable();\\n    wdt1.disable();\\n    println!(\\"Hello world!\\");\\n\\n    loop {}\\n}\\n","s":"[package]\\nname = \\"rust_project_esp32c3\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[dependencies]\\nhal = { package = \\"esp32c3-hal\\", version = \\"0.9.0\\" }\\nesp-backtrace = { version = \\"0.7.0\\", features = [\\n    \\"esp32c3\\",\\n    \\"panic-handler\\",\\n    \\"exception-handler\\",\\n    \\"print-uart\\",\\n] }\\nesp-println = { version = \\"0.5.0\\", features = [\\"esp32c3\\"] }\\n"},"hP":{"D":"#![no_std]\\n#![no_main]\\n\\nuse panic_halt as _;\\n\\n#[arduino_hal::entry]\\nfn main() -> ! {\\n    let dp = arduino_hal::Peripherals::take().unwrap();\\n    let pins = arduino_hal::pins!(dp);\\n\\n    let mut led = pins.d13.into_output();\\n\\n    loop {\\n        led.toggle();\\n        arduino_hal::delay_ms(1000);\\n    }\\n}\\n\\n","s":"[package]\\nname = \\"rust-avr-mega\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Frederick Vollbrecht<frederick@vollbrecht.cc>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[[bin]]\\nname = \\"rust-avr-mega\\"\\ntest = false\\nbench = false\\n\\n[dependencies]\\npanic-halt = \\"0.2.0\\"\\nufmt = \\"0.1.0\\"\\nnb = \\"0.1.2\\"\\nembedded-hal = \\"0.2.3\\"\\n\\n[dependencies.arduino-hal]\\ngit = \\"https://github.com/rahix/avr-hal\\"\\nrev = \\"7dfa6d322b9df98b2d98afe0e14a97afe0187ac1\\"\\nfeatures = [\\"arduino-mega2560\\"]\\n\\n# Configure the build for minimal size - AVRs have very little program memory\\n[profile.release]\\npanic = \\"abort\\"\\ncodegen-units = 1\\ndebug = true\\nlto = true\\nopt-level = \\"s\\"\\n"},"Ui":{"D":"#![no_std]\\n#![no_main]\\n\\nuse panic_halt as _;\\n\\n#[arduino_hal::entry]\\nfn main() -> ! {\\n    let dp = arduino_hal::Peripherals::take().unwrap();\\n    let pins = arduino_hal::pins!(dp);\\n\\n    let mut led = pins.d13.into_output();\\n\\n    loop {\\n        led.toggle();\\n        arduino_hal::delay_ms(1000);\\n    }\\n}\\n","s":"[package]\\nname = \\"rust-avr-nano\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Frederick Vollbrecht<frederick@vollbrecht.cc>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[[bin]]\\nname = \\"rust-avr-nano\\"\\ntest = false\\nbench = false\\n\\n[dependencies]\\npanic-halt = \\"0.2.0\\"\\nufmt = \\"0.1.0\\"\\nnb = \\"0.1.2\\"\\nembedded-hal = \\"0.2.3\\"\\n\\n[dependencies.arduino-hal]\\ngit = \\"https://github.com/rahix/avr-hal\\"\\nrev = \\"7dfa6d322b9df98b2d98afe0e14a97afe0187ac1\\"\\nfeatures = [\\"arduino-nano\\"]\\n\\n# Configure the build for minimal size - AVRs have very little program memory\\n[profile.release]\\npanic = \\"abort\\"\\ncodegen-units = 1\\ndebug = true\\nlto = true\\nopt-level = \\"s\\"\\n"},"xE":{"D":"#![no_std]\\n#![no_main]\\n\\nuse panic_halt as _;\\n\\n#[arduino_hal::entry]\\nfn main() -> ! {\\n    let dp = arduino_hal::Peripherals::take().unwrap();\\n    let pins = arduino_hal::pins!(dp);\\n\\n    let mut led = pins.d13.into_output();\\n\\n    loop {\\n        led.toggle();\\n        arduino_hal::delay_ms(1000);\\n    }\\n}\\n","s":"[package]\\nname = \\"rust-avr-uno\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Frederick Vollbrecht<frederick@vollbrecht.cc>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[[bin]]\\nname = \\"rust-avr-uno\\"\\ntest = false\\nbench = false\\n\\n[dependencies]\\npanic-halt = \\"0.2.0\\"\\nufmt = \\"0.1.0\\"\\nnb = \\"0.1.2\\"\\nembedded-hal = \\"0.2.3\\"\\n\\n[dependencies.arduino-hal]\\ngit = \\"https://github.com/rahix/avr-hal\\"\\nrev = \\"7dfa6d322b9df98b2d98afe0e14a97afe0187ac1\\"\\nfeatures = [\\"arduino-uno\\"]\\n\\n# Configure the build for minimal size - AVRs have very little program memory\\n[profile.release]\\npanic = \\"abort\\"\\ncodegen-units = 1\\ndebug = true\\nlto = true\\nopt-level = \\"s\\"\\n"}}');let a="Anonymous maker",i="void setup() {\n  // put your setup code here, to run once:\n\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n\n}\n",l='void setup() {\n  // put your setup code here, to run once:\n  Serial.begin(115200);\n  Serial.println("Hello, ESP32!");\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  delay(10); // this speeds up the simulation\n}\n',p='void setup() {\n  // put your setup code here, to run once:\n  Serial.begin(115200);\n  Serial.println("Hello, STM32!");\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  delay(10); // this speeds up the simulation\n}\n',d='void setup() {\n  // put your setup code here, to run once:\n  Serial1.begin(115200);\n  Serial1.println("Hello, Raspberry Pi Pico!");\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  delay(1); // this speeds up the simulation\n}\n',c={blank:{name:"Blank Diagram",readme:'# Blank project\n\nThis is a blank Wokwi project. Please edit this README file and add a description of your project.\n\n## Usage\n\n1. Add parts by clicking the blue "+" button in the diagram editor\n2. Connect parts by dragging wires between them\n3. Click the green play button to start the simulation\n'},"arduino-uno":{name:"Arduino Uno",boardName:"wokwi-arduino-uno",boardId:"uno",sketch:i},"arduino-mega":{name:"Arduino Mega",boardName:"wokwi-arduino-mega",boardId:"mega",sketch:i},"arduino-nano":{name:"Arduino Nano",boardName:"wokwi-arduino-nano",boardId:"nano",sketch:i},attiny85:{name:"ATtiny85",boardName:"wokwi-attiny85",boardId:"tiny",sketch:i},esp32:{name:"ESP32",boardName:"wokwi-esp32-devkit-v1",boardId:"esp",sketch:l,defaultConnections:[["esp:TX0","$serialMonitor:RX",""],["esp:RX0","$serialMonitor:TX",""]]},"esp32-s2":{name:"ESP32-S2",boardName:"board-esp32-s2-devkitm-1",boardId:"esp",sketch:l.replace("ESP32","ESP32-S2"),defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]]},"esp32-s3":{name:"ESP32-S3 (beta)",boardName:"board-esp32-s3-devkitc-1",boardId:"esp",sketch:l.replace("ESP32","ESP32-S3"),defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]]},"esp32-c3":{name:"ESP32-C3",boardName:"board-esp32-c3-devkitm-1",boardId:"esp",sketch:l.replace("ESP32","ESP32-C3"),defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]]},"micropython-esp32":{name:"MicroPython on ESP32",boardName:"wokwi-esp32-devkit-v1",boardId:"esp",boardAttrs:{env:"micropython-20230426-v1.20.0"},sketchName:"main.py",sketch:'print("Hello, ESP32!")\n',defaultConnections:[["esp:TX0","$serialMonitor:RX",""],["esp:RX0","$serialMonitor:TX",""]]},"pi-pico":{name:"Raspberry Pi Pico",boardName:"wokwi-pi-pico",boardId:"pico",sketch:d,defaultConnections:[["pico:GP0","$serialMonitor:RX",""],["pico:GP1","$serialMonitor:TX",""]]},"pi-pico-sdk":{name:"Raspberry Pi Pico (SDK)",boardName:"wokwi-pi-pico",boardId:"pico",sketchName:"main.c",sketch:'#include <stdio.h>\n#include "pico/stdlib.h"\n\nint main() {\n  stdio_init_all();\n  while (true) {\n    printf("Hello, Wokwi!\\n");\n    sleep_ms(250);\n  }\n}',boardAttrs:{builder:"pico-sdk"},defaultConnections:[["pico:GP0","$serialMonitor:RX",""],["pico:GP1","$serialMonitor:TX",""]]},"micropython-pi-pico":{name:"MicroPython on Raspberry Pi Pico",boardName:"wokwi-pi-pico",boardId:"pico",boardAttrs:{env:"micropython-20230426-v1.20.0"},sketchName:"main.py",sketch:'import time\ntime.sleep(0.1) # Wait for USB to become ready\n\nprint("Hello, Pi Pico!")\n',defaultConnections:[]},"circuitpython-pi-pico":{name:"CircuitPython on Raspberry Pi Pico",boardName:"wokwi-pi-pico",boardId:"pico",boardAttrs:{env:"circuitpython-20210914-8520c43"},sketchName:"code.py",sketch:'print("Hello, Pi Pico!")\n',defaultConnections:[]},"pi-pico-w":{name:"Raspberry Pi Pico W",boardName:"board-pi-pico-w",boardId:"pico",sketch:d.replace("Pico!","Pico W!"),defaultConnections:[["pico:GP0","$serialMonitor:RX",""],["pico:GP1","$serialMonitor:TX",""]]},"pi-pico-w-sdk":{name:"Raspberry Pi Pico W (SDK)",boardName:"board-pi-pico-w",boardId:"pico",sketchName:"main.c",sketch:'#include <stdio.h>\n#include "pico/stdlib.h"\n#include "pico/cyw43_arch.h"\n\nint main() {\n  stdio_init_all();\n  while (true) {\n    printf("Hello, Wokwi!\\n");\n    sleep_ms(250);\n  }\n}',boardAttrs:{builder:"pico-sdk"},defaultConnections:[["pico:GP0","$serialMonitor:RX",""],["pico:GP1","$serialMonitor:TX",""]]},"micropython-pi-pico-w":{name:"MicroPython on Raspberry Pi Pico W",boardName:"board-pi-pico-w",boardId:"pico",boardAttrs:{env:"micropython-20230426-v1.20.0"},sketchName:"main.py",sketch:'print("Hello, Pi Pico W!")\n',defaultConnections:[]},"st-nucleo-c031c6":{name:"STM32 Nucleo64 C031C6",boardName:"board-st-nucleo-c031c6",boardId:"nucleo",sketch:p,defaultConnections:[["$serialMonitor:TX","nucleo:PA3","",[]],["$serialMonitor:RX","nucleo:PA2","",[]]]},"st-nucleo-l031k6":{name:"STM32 Nucleo64 L031K6",boardName:"board-st-nucleo-l031k6",boardId:"nucleo",sketch:p,defaultConnections:[["$serialMonitor:TX","nucleo:VCP_RX","",[]],["$serialMonitor:RX","nucleo:VCP_TX","",[]]]},franzininho:{name:"Franzininho",boardName:"wokwi-franzininho",boardId:"franzininho",sketch:i},"franzininho-wifi":{name:"Franzininho WiFi (ESP32-S2)",boardName:"board-franzininho-wifi",boardId:"franzininho",sketch:i},"rust-nostd-esp32":{name:"Rust on ESP32 (no_std)",boardName:"wokwi-esp32-devkit-v1",boardId:"esp",sketch:o.Yg.D,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-esp"},defaultConnections:[["esp:TX0","$serialMonitor:RX",""],["esp:RX0","$serialMonitor:TX",""]],serialMonitor:{display:"terminal",convertEol:!0},extraFiles:[{name:"Cargo.toml",content:o.Yg.s}]},"rust-nostd-esp32-c3":{name:"Rust on ESP32-C3 (no_std)",boardName:"board-esp32-c3-devkitm-1",boardId:"esp",sketch:o.v3.D,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-esp"},defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]],serialMonitor:{display:"terminal",convertEol:!0},extraFiles:[{name:"Cargo.toml",content:o.v3.s}]},"rust-nostd-esp32-s2":{name:"Rust on ESP32-S2 (no_std)",boardName:"board-esp32-s2-devkitm-1",boardId:"esp",sketch:o.Gm.D,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-esp"},defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]],serialMonitor:{display:"terminal",convertEol:!0},extraFiles:[{name:"Cargo.toml",content:o.Gm.s}]},"rust-nostd-esp32-s3":{name:"Rust on ESP32-S3 (no_std)",boardName:"board-esp32-s3-devkitc-1",boardId:"esp",sketch:o.Hs.D,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-esp"},defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]],serialMonitor:{display:"terminal",convertEol:!0},extraFiles:[{name:"Cargo.toml",content:o.Hs.s}]},"rust-nostd-esp32-rust-board":{name:"Rust on ESP32 Rust Board (no_std)",boardName:"board-esp32-c3-rust-1",boardId:"esp",sketch:o.Im.D,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-esp"},defaultConnections:[["esp:21","$serialMonitor:RX",""],["esp:20","$serialMonitor:TX",""]],serialMonitor:{display:"terminal",convertEol:!0},extraFiles:[{name:"Cargo.toml",content:o.Im.s}]},"rust-esp32":{name:"Rust on ESP32 (std)",boardName:"wokwi-esp32-devkit-v1",boardId:"esp",sketch:o.Sw.D,sketchName:"main.rs",boardAttrs:{builder:"rust-std-esp"},defaultConnections:[["esp:TX0","$serialMonitor:RX",""],["esp:RX0","$serialMonitor:TX",""]],serialMonitor:{display:"terminal"},extraFiles:[{name:"Cargo.toml",content:o.Sw.s}]},"rust-esp32-c3":{name:"Rust on ESP32-C3 (std)",boardName:"board-esp32-c3-devkitm-1",boardId:"esp",sketch:o.yV.D,sketchName:"main.rs",boardAttrs:{builder:"rust-std-esp"},defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]],serialMonitor:{display:"terminal"},extraFiles:[{name:"Cargo.toml",content:o.yV.s}]},"rust-esp32-s2":{name:"Rust on ESP32-S2 (std)",boardName:"board-esp32-s2-devkitm-1",boardId:"esp",sketch:o.cq.D,sketchName:"main.rs",boardAttrs:{builder:"rust-std-esp"},defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]],serialMonitor:{display:"terminal"},extraFiles:[{name:"Cargo.toml",content:o.cq.s}]},"rust-esp32-s3":{name:"Rust on ESP32-S3 (std)",boardName:"board-esp32-s3-devkitc-1",boardId:"esp",sketch:o.U6.D,sketchName:"main.rs",boardAttrs:{builder:"rust-std-esp"},defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]],serialMonitor:{display:"terminal"},extraFiles:[{name:"Cargo.toml",content:o.U6.s}]},"rust-esp32-rust-board":{name:"Rust on ESP32 Rust Board (std)",boardName:"board-esp32-c3-rust-1",boardId:"esp",sketch:o._y.D,sketchName:"main.rs",boardAttrs:{builder:"rust-std-esp"},defaultConnections:[["esp:21","$serialMonitor:RX",""],["esp:20","$serialMonitor:TX",""]],serialMonitor:{display:"terminal"},extraFiles:[{name:"Cargo.toml",content:o._y.s}]},"rust-avr-uno":{name:"Rust on Arduino Uno",boardName:"wokwi-arduino-uno",boardId:"uno",sketch:o.xE.D,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-avr"},extraFiles:[{name:"Cargo.toml",content:o.xE.s}]},"rust-avr-mega":{name:"Rust on Arduino Mega",boardName:"wokwi-arduino-mega",boardId:"mega",sketch:o.hP.D,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-avr"},extraFiles:[{name:"Cargo.toml",content:o.hP.s}]},"rust-avr-nano":{name:"Rust on Arduino Nano",boardName:"wokwi-arduino-nano",boardId:"nano",sketch:o.Ui.D,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-avr"},extraFiles:[{name:"Cargo.toml",content:o.Ui.s}]}};function u(e){var n,r;let s=[{name:"diagram.json",content:function(e){let{boardName:n,boardId:r,boardAttrs:s,defaultConnections:o,serialMonitor:i}=e;return t()({version:1,author:a,editor:"wokwi",parts:r&&n?[{id:r,type:n,attrs:s}]:[],connections:null!=o?o:[],serialMonitor:i},null,2,100)}(e)},...null!==(n=e.extraFiles)&&void 0!==n?n:[]];return e.sketch&&s.unshift({name:null!==(r=e.sketchName)&&void 0!==r?r:"sketch.ino",content:e.sketch}),e.readme&&s.unshift({name:"README.md",content:e.readme}),s}}}]);